//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: sp_common.proto

package com.streamdal.protos;

@kotlin.jvm.JvmName("-initializemetric")
public inline fun metric(block: com.streamdal.protos.MetricKt.Dsl.() -> kotlin.Unit): com.streamdal.protos.SpCommon.Metric =
  com.streamdal.protos.MetricKt.Dsl._create(com.streamdal.protos.SpCommon.Metric.newBuilder()).apply { block() }._build()
public object MetricKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: com.streamdal.protos.SpCommon.Metric.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: com.streamdal.protos.SpCommon.Metric.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): com.streamdal.protos.SpCommon.Metric = _builder.build()

    /**
     * <code>string name = 1;</code>
     */
    public var name: kotlin.String
      @JvmName("getName")
      get() = _builder.getName()
      @JvmName("setName")
      set(value) {
        _builder.setName(value)
      }
    /**
     * <code>string name = 1;</code>
     */
    public fun clearName() {
      _builder.clearName()
    }

    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    public class LabelsProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * <code>map&lt;string, string&gt; labels = 2;</code>
     */
     public val labels: com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.String, LabelsProxy>
      @kotlin.jvm.JvmSynthetic
      @JvmName("getLabelsMap")
      get() = com.google.protobuf.kotlin.DslMap(
        _builder.getLabelsMap()
      )
    /**
     * <code>map&lt;string, string&gt; labels = 2;</code>
     */
    @JvmName("putLabels")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.String, LabelsProxy>
      .put(key: kotlin.String, value: kotlin.String) {
         _builder.putLabels(key, value)
       }
    /**
     * <code>map&lt;string, string&gt; labels = 2;</code>
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("setLabels")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.String, LabelsProxy>
      .set(key: kotlin.String, value: kotlin.String) {
         put(key, value)
       }
    /**
     * <code>map&lt;string, string&gt; labels = 2;</code>
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("removeLabels")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.String, LabelsProxy>
      .remove(key: kotlin.String) {
         _builder.removeLabels(key)
       }
    /**
     * <code>map&lt;string, string&gt; labels = 2;</code>
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("putAllLabels")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.String, LabelsProxy>
      .putAll(map: kotlin.collections.Map<kotlin.String, kotlin.String>) {
         _builder.putAllLabels(map)
       }
    /**
     * <code>map&lt;string, string&gt; labels = 2;</code>
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("clearLabels")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.String, LabelsProxy>
      .clear() {
         _builder.clearLabels()
       }

    /**
     * <code>double value = 3;</code>
     */
    public var value: kotlin.Double
      @JvmName("getValue")
      get() = _builder.getValue()
      @JvmName("setValue")
      set(value) {
        _builder.setValue(value)
      }
    /**
     * <code>double value = 3;</code>
     */
    public fun clearValue() {
      _builder.clearValue()
    }

    /**
     * <code>.protos.Audience audience = 4;</code>
     */
    public var audience: com.streamdal.protos.SpCommon.Audience
      @JvmName("getAudience")
      get() = _builder.getAudience()
      @JvmName("setAudience")
      set(value) {
        _builder.setAudience(value)
      }
    /**
     * <code>.protos.Audience audience = 4;</code>
     */
    public fun clearAudience() {
      _builder.clearAudience()
    }
    /**
     * <code>.protos.Audience audience = 4;</code>
     * @return Whether the audience field is set.
     */
    public fun hasAudience(): kotlin.Boolean {
      return _builder.hasAudience()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun com.streamdal.protos.SpCommon.Metric.copy(block: com.streamdal.protos.MetricKt.Dsl.() -> kotlin.Unit): com.streamdal.protos.SpCommon.Metric =
  com.streamdal.protos.MetricKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val com.streamdal.protos.SpCommon.MetricOrBuilder.audienceOrNull: com.streamdal.protos.SpCommon.Audience?
  get() = if (hasAudience()) getAudience() else null

