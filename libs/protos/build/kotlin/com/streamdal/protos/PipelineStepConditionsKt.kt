//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: sp_pipeline.proto

package com.streamdal.protos;

@kotlin.jvm.JvmName("-initializepipelineStepConditions")
public inline fun pipelineStepConditions(block: com.streamdal.protos.PipelineStepConditionsKt.Dsl.() -> kotlin.Unit): com.streamdal.protos.SpPipeline.PipelineStepConditions =
  com.streamdal.protos.PipelineStepConditionsKt.Dsl._create(com.streamdal.protos.SpPipeline.PipelineStepConditions.newBuilder()).apply { block() }._build()
public object PipelineStepConditionsKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: com.streamdal.protos.SpPipeline.PipelineStepConditions.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: com.streamdal.protos.SpPipeline.PipelineStepConditions.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): com.streamdal.protos.SpPipeline.PipelineStepConditions = _builder.build()

    /**
     * <pre>
     * Should we abort execution?
     * </pre>
     *
     * <code>.protos.AbortCondition abort = 1;</code>
     */
    public var abort: com.streamdal.protos.SpPipeline.AbortCondition
      @JvmName("getAbort")
      get() = _builder.getAbort()
      @JvmName("setAbort")
      set(value) {
        _builder.setAbort(value)
      }
    /**
     * <pre>
     * Should we abort execution?
     * </pre>
     *
     * <code>.protos.AbortCondition abort = 1;</code>
     */
    public fun clearAbort() {
      _builder.clearAbort()
    }

    /**
     * <code>bool notify = 2 [deprecated = true];</code>
     */
    @kotlin.Deprecated(message = "Field notify is deprecated") public var notify: kotlin.Boolean
      @JvmName("getNotify")
      get() = _builder.getNotify()
      @JvmName("setNotify")
      set(value) {
        _builder.setNotify(value)
      }
    /**
     * <code>bool notify = 2 [deprecated = true];</code>
     * @deprecated protos.PipelineStepConditions.notify is deprecated.
     *     See sp_pipeline.proto;l=56
     */
    public fun clearNotify() {
      _builder.clearNotify()
    }

    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    public class MetadataProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * <pre>
     * Should we include additional metadata that SDK should pass back to user?
     * </pre>
     *
     * <code>map&lt;string, string&gt; metadata = 3;</code>
     */
     public val metadata: com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.String, MetadataProxy>
      @kotlin.jvm.JvmSynthetic
      @JvmName("getMetadataMap")
      get() = com.google.protobuf.kotlin.DslMap(
        _builder.getMetadataMap()
      )
    /**
     * <pre>
     * Should we include additional metadata that SDK should pass back to user?
     * </pre>
     *
     * <code>map&lt;string, string&gt; metadata = 3;</code>
     */
    @JvmName("putMetadata")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.String, MetadataProxy>
      .put(key: kotlin.String, value: kotlin.String) {
         _builder.putMetadata(key, value)
       }
    /**
     * <pre>
     * Should we include additional metadata that SDK should pass back to user?
     * </pre>
     *
     * <code>map&lt;string, string&gt; metadata = 3;</code>
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("setMetadata")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.String, MetadataProxy>
      .set(key: kotlin.String, value: kotlin.String) {
         put(key, value)
       }
    /**
     * <pre>
     * Should we include additional metadata that SDK should pass back to user?
     * </pre>
     *
     * <code>map&lt;string, string&gt; metadata = 3;</code>
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("removeMetadata")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.String, MetadataProxy>
      .remove(key: kotlin.String) {
         _builder.removeMetadata(key)
       }
    /**
     * <pre>
     * Should we include additional metadata that SDK should pass back to user?
     * </pre>
     *
     * <code>map&lt;string, string&gt; metadata = 3;</code>
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("putAllMetadata")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.String, MetadataProxy>
      .putAll(map: kotlin.collections.Map<kotlin.String, kotlin.String>) {
         _builder.putAllMetadata(map)
       }
    /**
     * <pre>
     * Should we include additional metadata that SDK should pass back to user?
     * </pre>
     *
     * <code>map&lt;string, string&gt; metadata = 3;</code>
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("clearMetadata")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.String, MetadataProxy>
      .clear() {
         _builder.clearMetadata()
       }

    /**
     * <code>.protos.PipelineStepNotification notification = 4;</code>
     */
    public var notification: com.streamdal.protos.SpPipeline.PipelineStepNotification
      @JvmName("getNotification")
      get() = _builder.getNotification()
      @JvmName("setNotification")
      set(value) {
        _builder.setNotification(value)
      }
    /**
     * <code>.protos.PipelineStepNotification notification = 4;</code>
     */
    public fun clearNotification() {
      _builder.clearNotification()
    }
    /**
     * <code>.protos.PipelineStepNotification notification = 4;</code>
     * @return Whether the notification field is set.
     */
    public fun hasNotification(): kotlin.Boolean {
      return _builder.hasNotification()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun com.streamdal.protos.SpPipeline.PipelineStepConditions.copy(block: com.streamdal.protos.PipelineStepConditionsKt.Dsl.() -> kotlin.Unit): com.streamdal.protos.SpPipeline.PipelineStepConditions =
  com.streamdal.protos.PipelineStepConditionsKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val com.streamdal.protos.SpPipeline.PipelineStepConditionsOrBuilder.notificationOrNull: com.streamdal.protos.SpPipeline.PipelineStepNotification?
  get() = if (hasNotification()) getNotification() else null

