//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: sp_notify.proto

package com.streamdal.protos;

@kotlin.jvm.JvmName("-initializenotificationEmailSMTP")
public inline fun notificationEmailSMTP(block: com.streamdal.protos.NotificationEmailSMTPKt.Dsl.() -> kotlin.Unit): com.streamdal.protos.SpNotify.NotificationEmailSMTP =
  com.streamdal.protos.NotificationEmailSMTPKt.Dsl._create(com.streamdal.protos.SpNotify.NotificationEmailSMTP.newBuilder()).apply { block() }._build()
public object NotificationEmailSMTPKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: com.streamdal.protos.SpNotify.NotificationEmailSMTP.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: com.streamdal.protos.SpNotify.NotificationEmailSMTP.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): com.streamdal.protos.SpNotify.NotificationEmailSMTP = _builder.build()

    /**
     * <code>string host = 1;</code>
     */
    public var host: kotlin.String
      @JvmName("getHost")
      get() = _builder.getHost()
      @JvmName("setHost")
      set(value) {
        _builder.setHost(value)
      }
    /**
     * <code>string host = 1;</code>
     */
    public fun clearHost() {
      _builder.clearHost()
    }

    /**
     * <code>int32 port = 2;</code>
     */
    public var port: kotlin.Int
      @JvmName("getPort")
      get() = _builder.getPort()
      @JvmName("setPort")
      set(value) {
        _builder.setPort(value)
      }
    /**
     * <code>int32 port = 2;</code>
     */
    public fun clearPort() {
      _builder.clearPort()
    }

    /**
     * <code>string user = 3;</code>
     */
    public var user: kotlin.String
      @JvmName("getUser")
      get() = _builder.getUser()
      @JvmName("setUser")
      set(value) {
        _builder.setUser(value)
      }
    /**
     * <code>string user = 3;</code>
     */
    public fun clearUser() {
      _builder.clearUser()
    }

    /**
     * <code>string password = 4;</code>
     */
    public var password: kotlin.String
      @JvmName("getPassword")
      get() = _builder.getPassword()
      @JvmName("setPassword")
      set(value) {
        _builder.setPassword(value)
      }
    /**
     * <code>string password = 4;</code>
     */
    public fun clearPassword() {
      _builder.clearPassword()
    }

    /**
     * <code>bool use_tls = 5;</code>
     */
    public var useTls: kotlin.Boolean
      @JvmName("getUseTls")
      get() = _builder.getUseTls()
      @JvmName("setUseTls")
      set(value) {
        _builder.setUseTls(value)
      }
    /**
     * <code>bool use_tls = 5;</code>
     */
    public fun clearUseTls() {
      _builder.clearUseTls()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun com.streamdal.protos.SpNotify.NotificationEmailSMTP.copy(block: com.streamdal.protos.NotificationEmailSMTPKt.Dsl.() -> kotlin.Unit): com.streamdal.protos.SpNotify.NotificationEmailSMTP =
  com.streamdal.protos.NotificationEmailSMTPKt.Dsl._create(this.toBuilder()).apply { block() }._build()

