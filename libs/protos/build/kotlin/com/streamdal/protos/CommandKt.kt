//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: sp_command.proto

package com.streamdal.protos;

@kotlin.jvm.JvmName("-initializecommand")
public inline fun command(block: com.streamdal.protos.CommandKt.Dsl.() -> kotlin.Unit): com.streamdal.protos.SpCommand.Command =
  com.streamdal.protos.CommandKt.Dsl._create(com.streamdal.protos.SpCommand.Command.newBuilder()).apply { block() }._build()
public object CommandKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: com.streamdal.protos.SpCommand.Command.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: com.streamdal.protos.SpCommand.Command.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): com.streamdal.protos.SpCommand.Command = _builder.build()

    /**
     * <pre>
     * Who is this command intended for?
     * NOTE: Some commands (such as KeepAliveCommand, KVCommand) do NOT use audience and will ignore it
     * </pre>
     *
     * <code>.protos.Audience audience = 1;</code>
     */
    public var audience: com.streamdal.protos.SpCommon.Audience
      @JvmName("getAudience")
      get() = _builder.getAudience()
      @JvmName("setAudience")
      set(value) {
        _builder.setAudience(value)
      }
    /**
     * <pre>
     * Who is this command intended for?
     * NOTE: Some commands (such as KeepAliveCommand, KVCommand) do NOT use audience and will ignore it
     * </pre>
     *
     * <code>.protos.Audience audience = 1;</code>
     */
    public fun clearAudience() {
      _builder.clearAudience()
    }
    /**
     * <pre>
     * Who is this command intended for?
     * NOTE: Some commands (such as KeepAliveCommand, KVCommand) do NOT use audience and will ignore it
     * </pre>
     *
     * <code>.protos.Audience audience = 1;</code>
     * @return Whether the audience field is set.
     */
    public fun hasAudience(): kotlin.Boolean {
      return _builder.hasAudience()
    }

    /**
     * <pre>
     * Emitted by server when a user makes a pause, resume, delete or update
     * pipeline and set pipelines external grpc API call.
     * NOTE: This was introduced during ordered pipeline updates.
     * </pre>
     *
     * <code>.protos.SetPipelinesCommand set_pipelines = 100;</code>
     */
    public var setPipelines: com.streamdal.protos.SpCommand.SetPipelinesCommand
      @JvmName("getSetPipelines")
      get() = _builder.getSetPipelines()
      @JvmName("setSetPipelines")
      set(value) {
        _builder.setSetPipelines(value)
      }
    /**
     * <pre>
     * Emitted by server when a user makes a pause, resume, delete or update
     * pipeline and set pipelines external grpc API call.
     * NOTE: This was introduced during ordered pipeline updates.
     * </pre>
     *
     * <code>.protos.SetPipelinesCommand set_pipelines = 100;</code>
     */
    public fun clearSetPipelines() {
      _builder.clearSetPipelines()
    }
    /**
     * <pre>
     * Emitted by server when a user makes a pause, resume, delete or update
     * pipeline and set pipelines external grpc API call.
     * NOTE: This was introduced during ordered pipeline updates.
     * </pre>
     *
     * <code>.protos.SetPipelinesCommand set_pipelines = 100;</code>
     * @return Whether the setPipelines field is set.
     */
    public fun hasSetPipelines(): kotlin.Boolean {
      return _builder.hasSetPipelines()
    }

    /**
     * <pre>
     * Server sends this periodically to SDKs to keep the connection alive
     * </pre>
     *
     * <code>.protos.KeepAliveCommand keep_alive = 101;</code>
     */
    public var keepAlive: com.streamdal.protos.SpCommand.KeepAliveCommand
      @JvmName("getKeepAlive")
      get() = _builder.getKeepAlive()
      @JvmName("setKeepAlive")
      set(value) {
        _builder.setKeepAlive(value)
      }
    /**
     * <pre>
     * Server sends this periodically to SDKs to keep the connection alive
     * </pre>
     *
     * <code>.protos.KeepAliveCommand keep_alive = 101;</code>
     */
    public fun clearKeepAlive() {
      _builder.clearKeepAlive()
    }
    /**
     * <pre>
     * Server sends this periodically to SDKs to keep the connection alive
     * </pre>
     *
     * <code>.protos.KeepAliveCommand keep_alive = 101;</code>
     * @return Whether the keepAlive field is set.
     */
    public fun hasKeepAlive(): kotlin.Boolean {
      return _builder.hasKeepAlive()
    }

    /**
     * <pre>
     * Server will emit this when a user makes changes to the KV store
     * via the KV HTTP API.
     * </pre>
     *
     * <code>.protos.KVCommand kv = 102;</code>
     */
    public var kv: com.streamdal.protos.SpCommand.KVCommand
      @JvmName("getKv")
      get() = _builder.getKv()
      @JvmName("setKv")
      set(value) {
        _builder.setKv(value)
      }
    /**
     * <pre>
     * Server will emit this when a user makes changes to the KV store
     * via the KV HTTP API.
     * </pre>
     *
     * <code>.protos.KVCommand kv = 102;</code>
     */
    public fun clearKv() {
      _builder.clearKv()
    }
    /**
     * <pre>
     * Server will emit this when a user makes changes to the KV store
     * via the KV HTTP API.
     * </pre>
     *
     * <code>.protos.KVCommand kv = 102;</code>
     * @return Whether the kv field is set.
     */
    public fun hasKv(): kotlin.Boolean {
      return _builder.hasKv()
    }

    /**
     * <pre>
     * Emitted by server when a user makes a Tail() call
     * Consumed by all server instances and by SDKs
     * </pre>
     *
     * <code>.protos.TailCommand tail = 103;</code>
     */
    public var tail: com.streamdal.protos.SpCommand.TailCommand
      @JvmName("getTail")
      get() = _builder.getTail()
      @JvmName("setTail")
      set(value) {
        _builder.setTail(value)
      }
    /**
     * <pre>
     * Emitted by server when a user makes a Tail() call
     * Consumed by all server instances and by SDKs
     * </pre>
     *
     * <code>.protos.TailCommand tail = 103;</code>
     */
    public fun clearTail() {
      _builder.clearTail()
    }
    /**
     * <pre>
     * Emitted by server when a user makes a Tail() call
     * Consumed by all server instances and by SDKs
     * </pre>
     *
     * <code>.protos.TailCommand tail = 103;</code>
     * @return Whether the tail field is set.
     */
    public fun hasTail(): kotlin.Boolean {
      return _builder.hasTail()
    }
    public val commandCase: com.streamdal.protos.SpCommand.Command.CommandCase
      @JvmName("getCommandCase")
      get() = _builder.getCommandCase()

    public fun clearCommand() {
      _builder.clearCommand()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun com.streamdal.protos.SpCommand.Command.copy(block: com.streamdal.protos.CommandKt.Dsl.() -> kotlin.Unit): com.streamdal.protos.SpCommand.Command =
  com.streamdal.protos.CommandKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val com.streamdal.protos.SpCommand.CommandOrBuilder.audienceOrNull: com.streamdal.protos.SpCommon.Audience?
  get() = if (hasAudience()) getAudience() else null

public val com.streamdal.protos.SpCommand.CommandOrBuilder.setPipelinesOrNull: com.streamdal.protos.SpCommand.SetPipelinesCommand?
  get() = if (hasSetPipelines()) getSetPipelines() else null

public val com.streamdal.protos.SpCommand.CommandOrBuilder.keepAliveOrNull: com.streamdal.protos.SpCommand.KeepAliveCommand?
  get() = if (hasKeepAlive()) getKeepAlive() else null

public val com.streamdal.protos.SpCommand.CommandOrBuilder.kvOrNull: com.streamdal.protos.SpCommand.KVCommand?
  get() = if (hasKv()) getKv() else null

public val com.streamdal.protos.SpCommand.CommandOrBuilder.tailOrNull: com.streamdal.protos.SpCommand.TailCommand?
  get() = if (hasTail()) getTail() else null

