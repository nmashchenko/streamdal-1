//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: steps/sp_steps_schema_validation.proto

package com.streamdal.protos.steps;

@kotlin.jvm.JvmName("-initializeschemaValidationStep")
public inline fun schemaValidationStep(block: com.streamdal.protos.steps.SchemaValidationStepKt.Dsl.() -> kotlin.Unit): com.streamdal.protos.steps.SpStepsSchemaValidation.SchemaValidationStep =
  com.streamdal.protos.steps.SchemaValidationStepKt.Dsl._create(com.streamdal.protos.steps.SpStepsSchemaValidation.SchemaValidationStep.newBuilder()).apply { block() }._build()
public object SchemaValidationStepKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: com.streamdal.protos.steps.SpStepsSchemaValidation.SchemaValidationStep.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: com.streamdal.protos.steps.SpStepsSchemaValidation.SchemaValidationStep.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): com.streamdal.protos.steps.SpStepsSchemaValidation.SchemaValidationStep = _builder.build()

    /**
     * <code>.protos.steps.SchemaValidationType type = 1;</code>
     */
    public var type: com.streamdal.protos.steps.SpStepsSchemaValidation.SchemaValidationType
      @JvmName("getType")
      get() = _builder.getType()
      @JvmName("setType")
      set(value) {
        _builder.setType(value)
      }
    /**
     * <code>.protos.steps.SchemaValidationType type = 1;</code>
     */
    public fun clearType() {
      _builder.clearType()
    }

    /**
     * <code>.protos.steps.SchemaValidationCondition condition = 2;</code>
     */
    public var condition: com.streamdal.protos.steps.SpStepsSchemaValidation.SchemaValidationCondition
      @JvmName("getCondition")
      get() = _builder.getCondition()
      @JvmName("setCondition")
      set(value) {
        _builder.setCondition(value)
      }
    /**
     * <code>.protos.steps.SchemaValidationCondition condition = 2;</code>
     */
    public fun clearCondition() {
      _builder.clearCondition()
    }

    /**
     * <code>.protos.steps.SchemaValidationJSONSchema json_schema = 101;</code>
     */
    public var jsonSchema: com.streamdal.protos.steps.SpStepsSchemaValidation.SchemaValidationJSONSchema
      @JvmName("getJsonSchema")
      get() = _builder.getJsonSchema()
      @JvmName("setJsonSchema")
      set(value) {
        _builder.setJsonSchema(value)
      }
    /**
     * <code>.protos.steps.SchemaValidationJSONSchema json_schema = 101;</code>
     */
    public fun clearJsonSchema() {
      _builder.clearJsonSchema()
    }
    /**
     * <code>.protos.steps.SchemaValidationJSONSchema json_schema = 101;</code>
     * @return Whether the jsonSchema field is set.
     */
    public fun hasJsonSchema(): kotlin.Boolean {
      return _builder.hasJsonSchema()
    }
    public val optionsCase: com.streamdal.protos.steps.SpStepsSchemaValidation.SchemaValidationStep.OptionsCase
      @JvmName("getOptionsCase")
      get() = _builder.getOptionsCase()

    public fun clearOptions() {
      _builder.clearOptions()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun com.streamdal.protos.steps.SpStepsSchemaValidation.SchemaValidationStep.copy(block: com.streamdal.protos.steps.SchemaValidationStepKt.Dsl.() -> kotlin.Unit): com.streamdal.protos.steps.SpStepsSchemaValidation.SchemaValidationStep =
  com.streamdal.protos.steps.SchemaValidationStepKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val com.streamdal.protos.steps.SpStepsSchemaValidation.SchemaValidationStepOrBuilder.jsonSchemaOrNull: com.streamdal.protos.steps.SpStepsSchemaValidation.SchemaValidationJSONSchema?
  get() = if (hasJsonSchema()) getJsonSchema() else null

