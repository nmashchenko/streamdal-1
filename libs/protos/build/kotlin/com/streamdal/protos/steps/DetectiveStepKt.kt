//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: steps/sp_steps_detective.proto

package com.streamdal.protos.steps;

@kotlin.jvm.JvmName("-initializedetectiveStep")
public inline fun detectiveStep(block: com.streamdal.protos.steps.DetectiveStepKt.Dsl.() -> kotlin.Unit): com.streamdal.protos.steps.SpStepsDetective.DetectiveStep =
  com.streamdal.protos.steps.DetectiveStepKt.Dsl._create(com.streamdal.protos.steps.SpStepsDetective.DetectiveStep.newBuilder()).apply { block() }._build()
public object DetectiveStepKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: com.streamdal.protos.steps.SpStepsDetective.DetectiveStep.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: com.streamdal.protos.steps.SpStepsDetective.DetectiveStep.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): com.streamdal.protos.steps.SpStepsDetective.DetectiveStep = _builder.build()

    /**
     * <code>optional string path = 1;</code>
     */
    public var path: kotlin.String
      @JvmName("getPath")
      get() = _builder.getPath()
      @JvmName("setPath")
      set(value) {
        _builder.setPath(value)
      }
    /**
     * <code>optional string path = 1;</code>
     */
    public fun clearPath() {
      _builder.clearPath()
    }
    /**
     * <code>optional string path = 1;</code>
     * @return Whether the path field is set.
     */
    public fun hasPath(): kotlin.Boolean {
      return _builder.hasPath()
    }

    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    public class ArgsProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * <pre>
     * args determined by match_type
     * </pre>
     *
     * <code>repeated string args = 2;</code>
     * @return A list containing the args.
     */
    public val args: com.google.protobuf.kotlin.DslList<kotlin.String, ArgsProxy>
      @kotlin.jvm.JvmSynthetic
      get() = com.google.protobuf.kotlin.DslList(
        _builder.getArgsList()
      )
    /**
     * <pre>
     * args determined by match_type
     * </pre>
     *
     * <code>repeated string args = 2;</code>
     * @param value The args to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addArgs")
    public fun com.google.protobuf.kotlin.DslList<kotlin.String, ArgsProxy>.add(value: kotlin.String) {
      _builder.addArgs(value)
    }
    /**
     * <pre>
     * args determined by match_type
     * </pre>
     *
     * <code>repeated string args = 2;</code>
     * @param value The args to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignArgs")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<kotlin.String, ArgsProxy>.plusAssign(value: kotlin.String) {
      add(value)
    }
    /**
     * <pre>
     * args determined by match_type
     * </pre>
     *
     * <code>repeated string args = 2;</code>
     * @param values The args to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addAllArgs")
    public fun com.google.protobuf.kotlin.DslList<kotlin.String, ArgsProxy>.addAll(values: kotlin.collections.Iterable<kotlin.String>) {
      _builder.addAllArgs(values)
    }
    /**
     * <pre>
     * args determined by match_type
     * </pre>
     *
     * <code>repeated string args = 2;</code>
     * @param values The args to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignAllArgs")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<kotlin.String, ArgsProxy>.plusAssign(values: kotlin.collections.Iterable<kotlin.String>) {
      addAll(values)
    }
    /**
     * <pre>
     * args determined by match_type
     * </pre>
     *
     * <code>repeated string args = 2;</code>
     * @param index The index to set the value at.
     * @param value The args to set.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("setArgs")
    public operator fun com.google.protobuf.kotlin.DslList<kotlin.String, ArgsProxy>.set(index: kotlin.Int, value: kotlin.String) {
      _builder.setArgs(index, value)
    }/**
     * <pre>
     * args determined by match_type
     * </pre>
     *
     * <code>repeated string args = 2;</code>
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("clearArgs")
    public fun com.google.protobuf.kotlin.DslList<kotlin.String, ArgsProxy>.clear() {
      _builder.clearArgs()
    }
    /**
     * <code>optional bool negate = 3;</code>
     */
    public var negate: kotlin.Boolean
      @JvmName("getNegate")
      get() = _builder.getNegate()
      @JvmName("setNegate")
      set(value) {
        _builder.setNegate(value)
      }
    /**
     * <code>optional bool negate = 3;</code>
     */
    public fun clearNegate() {
      _builder.clearNegate()
    }
    /**
     * <code>optional bool negate = 3;</code>
     * @return Whether the negate field is set.
     */
    public fun hasNegate(): kotlin.Boolean {
      return _builder.hasNegate()
    }

    /**
     * <code>.protos.steps.DetectiveType type = 4;</code>
     */
    public var type: com.streamdal.protos.steps.SpStepsDetective.DetectiveType
      @JvmName("getType")
      get() = _builder.getType()
      @JvmName("setType")
      set(value) {
        _builder.setType(value)
      }
    /**
     * <code>.protos.steps.DetectiveType type = 4;</code>
     */
    public fun clearType() {
      _builder.clearType()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun com.streamdal.protos.steps.SpStepsDetective.DetectiveStep.copy(block: com.streamdal.protos.steps.DetectiveStepKt.Dsl.() -> kotlin.Unit): com.streamdal.protos.steps.SpStepsDetective.DetectiveStep =
  com.streamdal.protos.steps.DetectiveStepKt.Dsl._create(this.toBuilder()).apply { block() }._build()

