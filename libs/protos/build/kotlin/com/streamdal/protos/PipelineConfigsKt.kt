//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: sp_pipeline.proto

package com.streamdal.protos;

@kotlin.jvm.JvmName("-initializepipelineConfigs")
public inline fun pipelineConfigs(block: com.streamdal.protos.PipelineConfigsKt.Dsl.() -> kotlin.Unit): com.streamdal.protos.SpPipeline.PipelineConfigs =
  com.streamdal.protos.PipelineConfigsKt.Dsl._create(com.streamdal.protos.SpPipeline.PipelineConfigs.newBuilder()).apply { block() }._build()
public object PipelineConfigsKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: com.streamdal.protos.SpPipeline.PipelineConfigs.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: com.streamdal.protos.SpPipeline.PipelineConfigs.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): com.streamdal.protos.SpPipeline.PipelineConfigs = _builder.build()

    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    public class ConfigsProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * <code>repeated .protos.PipelineConfig configs = 1;</code>
     */
     public val configs: com.google.protobuf.kotlin.DslList<com.streamdal.protos.SpPipeline.PipelineConfig, ConfigsProxy>
      @kotlin.jvm.JvmSynthetic
      get() = com.google.protobuf.kotlin.DslList(
        _builder.getConfigsList()
      )
    /**
     * <code>repeated .protos.PipelineConfig configs = 1;</code>
     * @param value The configs to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addConfigs")
    public fun com.google.protobuf.kotlin.DslList<com.streamdal.protos.SpPipeline.PipelineConfig, ConfigsProxy>.add(value: com.streamdal.protos.SpPipeline.PipelineConfig) {
      _builder.addConfigs(value)
    }
    /**
     * <code>repeated .protos.PipelineConfig configs = 1;</code>
     * @param value The configs to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignConfigs")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<com.streamdal.protos.SpPipeline.PipelineConfig, ConfigsProxy>.plusAssign(value: com.streamdal.protos.SpPipeline.PipelineConfig) {
      add(value)
    }
    /**
     * <code>repeated .protos.PipelineConfig configs = 1;</code>
     * @param values The configs to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addAllConfigs")
    public fun com.google.protobuf.kotlin.DslList<com.streamdal.protos.SpPipeline.PipelineConfig, ConfigsProxy>.addAll(values: kotlin.collections.Iterable<com.streamdal.protos.SpPipeline.PipelineConfig>) {
      _builder.addAllConfigs(values)
    }
    /**
     * <code>repeated .protos.PipelineConfig configs = 1;</code>
     * @param values The configs to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignAllConfigs")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<com.streamdal.protos.SpPipeline.PipelineConfig, ConfigsProxy>.plusAssign(values: kotlin.collections.Iterable<com.streamdal.protos.SpPipeline.PipelineConfig>) {
      addAll(values)
    }
    /**
     * <code>repeated .protos.PipelineConfig configs = 1;</code>
     * @param index The index to set the value at.
     * @param value The configs to set.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("setConfigs")
    public operator fun com.google.protobuf.kotlin.DslList<com.streamdal.protos.SpPipeline.PipelineConfig, ConfigsProxy>.set(index: kotlin.Int, value: com.streamdal.protos.SpPipeline.PipelineConfig) {
      _builder.setConfigs(index, value)
    }
    /**
     * <code>repeated .protos.PipelineConfig configs = 1;</code>
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("clearConfigs")
    public fun com.google.protobuf.kotlin.DslList<com.streamdal.protos.SpPipeline.PipelineConfig, ConfigsProxy>.clear() {
      _builder.clearConfigs()
    }


    /**
     * <pre>
     * !!!!!!!! IMPORTANT !!!!!!!!!!
     * For internal use only in server. We need this because marshalling/encoding
     * an empty protobuf results in nil. If someone does a SetPipelines() with
     * empty pipeline IDs - we will set this, so that the encoded protobuf gets
     * written as the actual object and not nil.
     * </pre>
     *
     * <code>optional bool _is_empty = 1000;</code>
     */
    public var IsEmpty: kotlin.Boolean
      @JvmName("getIsEmpty")
      get() = _builder.getIsEmpty()
      @JvmName("setIsEmpty")
      set(value) {
        _builder.setIsEmpty(value)
      }
    /**
     * <pre>
     * !!!!!!!! IMPORTANT !!!!!!!!!!
     * For internal use only in server. We need this because marshalling/encoding
     * an empty protobuf results in nil. If someone does a SetPipelines() with
     * empty pipeline IDs - we will set this, so that the encoded protobuf gets
     * written as the actual object and not nil.
     * </pre>
     *
     * <code>optional bool _is_empty = 1000;</code>
     */
    public fun clearIsEmpty() {
      _builder.clearIsEmpty()
    }
    /**
     * <pre>
     * !!!!!!!! IMPORTANT !!!!!!!!!!
     * For internal use only in server. We need this because marshalling/encoding
     * an empty protobuf results in nil. If someone does a SetPipelines() with
     * empty pipeline IDs - we will set this, so that the encoded protobuf gets
     * written as the actual object and not nil.
     * </pre>
     *
     * <code>optional bool _is_empty = 1000;</code>
     * @return Whether the isEmpty field is set.
     */
    public fun hasIsEmpty(): kotlin.Boolean {
      return _builder.hasIsEmpty()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun com.streamdal.protos.SpPipeline.PipelineConfigs.copy(block: com.streamdal.protos.PipelineConfigsKt.Dsl.() -> kotlin.Unit): com.streamdal.protos.SpPipeline.PipelineConfigs =
  com.streamdal.protos.PipelineConfigsKt.Dsl._create(this.toBuilder()).apply { block() }._build()

