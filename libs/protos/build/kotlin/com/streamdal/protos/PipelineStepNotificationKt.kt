//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: sp_pipeline.proto

package com.streamdal.protos;

@kotlin.jvm.JvmName("-initializepipelineStepNotification")
public inline fun pipelineStepNotification(block: com.streamdal.protos.PipelineStepNotificationKt.Dsl.() -> kotlin.Unit): com.streamdal.protos.SpPipeline.PipelineStepNotification =
  com.streamdal.protos.PipelineStepNotificationKt.Dsl._create(com.streamdal.protos.SpPipeline.PipelineStepNotification.newBuilder()).apply { block() }._build()
public object PipelineStepNotificationKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: com.streamdal.protos.SpPipeline.PipelineStepNotification.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: com.streamdal.protos.SpPipeline.PipelineStepNotification.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): com.streamdal.protos.SpPipeline.PipelineStepNotification = _builder.build()

    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    public class NotificationConfigIdsProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * <pre>
     * The UUIDs of the notification config to use
     * This is kept separate to avoid having to configure slack/email settings
     * every time and also because that config info is sensitive and is encrypted
     * </pre>
     *
     * <code>repeated string notification_config_ids = 1;</code>
     * @return A list containing the notificationConfigIds.
     */
    public val notificationConfigIds: com.google.protobuf.kotlin.DslList<kotlin.String, NotificationConfigIdsProxy>
      @kotlin.jvm.JvmSynthetic
      get() = com.google.protobuf.kotlin.DslList(
        _builder.getNotificationConfigIdsList()
      )
    /**
     * <pre>
     * The UUIDs of the notification config to use
     * This is kept separate to avoid having to configure slack/email settings
     * every time and also because that config info is sensitive and is encrypted
     * </pre>
     *
     * <code>repeated string notification_config_ids = 1;</code>
     * @param value The notificationConfigIds to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addNotificationConfigIds")
    public fun com.google.protobuf.kotlin.DslList<kotlin.String, NotificationConfigIdsProxy>.add(value: kotlin.String) {
      _builder.addNotificationConfigIds(value)
    }
    /**
     * <pre>
     * The UUIDs of the notification config to use
     * This is kept separate to avoid having to configure slack/email settings
     * every time and also because that config info is sensitive and is encrypted
     * </pre>
     *
     * <code>repeated string notification_config_ids = 1;</code>
     * @param value The notificationConfigIds to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignNotificationConfigIds")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<kotlin.String, NotificationConfigIdsProxy>.plusAssign(value: kotlin.String) {
      add(value)
    }
    /**
     * <pre>
     * The UUIDs of the notification config to use
     * This is kept separate to avoid having to configure slack/email settings
     * every time and also because that config info is sensitive and is encrypted
     * </pre>
     *
     * <code>repeated string notification_config_ids = 1;</code>
     * @param values The notificationConfigIds to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addAllNotificationConfigIds")
    public fun com.google.protobuf.kotlin.DslList<kotlin.String, NotificationConfigIdsProxy>.addAll(values: kotlin.collections.Iterable<kotlin.String>) {
      _builder.addAllNotificationConfigIds(values)
    }
    /**
     * <pre>
     * The UUIDs of the notification config to use
     * This is kept separate to avoid having to configure slack/email settings
     * every time and also because that config info is sensitive and is encrypted
     * </pre>
     *
     * <code>repeated string notification_config_ids = 1;</code>
     * @param values The notificationConfigIds to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignAllNotificationConfigIds")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<kotlin.String, NotificationConfigIdsProxy>.plusAssign(values: kotlin.collections.Iterable<kotlin.String>) {
      addAll(values)
    }
    /**
     * <pre>
     * The UUIDs of the notification config to use
     * This is kept separate to avoid having to configure slack/email settings
     * every time and also because that config info is sensitive and is encrypted
     * </pre>
     *
     * <code>repeated string notification_config_ids = 1;</code>
     * @param index The index to set the value at.
     * @param value The notificationConfigIds to set.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("setNotificationConfigIds")
    public operator fun com.google.protobuf.kotlin.DslList<kotlin.String, NotificationConfigIdsProxy>.set(index: kotlin.Int, value: kotlin.String) {
      _builder.setNotificationConfigIds(index, value)
    }/**
     * <pre>
     * The UUIDs of the notification config to use
     * This is kept separate to avoid having to configure slack/email settings
     * every time and also because that config info is sensitive and is encrypted
     * </pre>
     *
     * <code>repeated string notification_config_ids = 1;</code>
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("clearNotificationConfigIds")
    public fun com.google.protobuf.kotlin.DslList<kotlin.String, NotificationConfigIdsProxy>.clear() {
      _builder.clearNotificationConfigIds()
    }
    /**
     * <code>.protos.PipelineStepNotification.PayloadType payload_type = 2;</code>
     */
    public var payloadType: com.streamdal.protos.SpPipeline.PipelineStepNotification.PayloadType
      @JvmName("getPayloadType")
      get() = _builder.getPayloadType()
      @JvmName("setPayloadType")
      set(value) {
        _builder.setPayloadType(value)
      }
    /**
     * <code>.protos.PipelineStepNotification.PayloadType payload_type = 2;</code>
     */
    public fun clearPayloadType() {
      _builder.clearPayloadType()
    }

    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    public class PathsProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * <pre>
     * If type == paths, then we will look here for a list of json paths to include
     * in the notification payload.
     * </pre>
     *
     * <code>repeated string paths = 3;</code>
     * @return A list containing the paths.
     */
    public val paths: com.google.protobuf.kotlin.DslList<kotlin.String, PathsProxy>
      @kotlin.jvm.JvmSynthetic
      get() = com.google.protobuf.kotlin.DslList(
        _builder.getPathsList()
      )
    /**
     * <pre>
     * If type == paths, then we will look here for a list of json paths to include
     * in the notification payload.
     * </pre>
     *
     * <code>repeated string paths = 3;</code>
     * @param value The paths to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addPaths")
    public fun com.google.protobuf.kotlin.DslList<kotlin.String, PathsProxy>.add(value: kotlin.String) {
      _builder.addPaths(value)
    }
    /**
     * <pre>
     * If type == paths, then we will look here for a list of json paths to include
     * in the notification payload.
     * </pre>
     *
     * <code>repeated string paths = 3;</code>
     * @param value The paths to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignPaths")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<kotlin.String, PathsProxy>.plusAssign(value: kotlin.String) {
      add(value)
    }
    /**
     * <pre>
     * If type == paths, then we will look here for a list of json paths to include
     * in the notification payload.
     * </pre>
     *
     * <code>repeated string paths = 3;</code>
     * @param values The paths to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addAllPaths")
    public fun com.google.protobuf.kotlin.DslList<kotlin.String, PathsProxy>.addAll(values: kotlin.collections.Iterable<kotlin.String>) {
      _builder.addAllPaths(values)
    }
    /**
     * <pre>
     * If type == paths, then we will look here for a list of json paths to include
     * in the notification payload.
     * </pre>
     *
     * <code>repeated string paths = 3;</code>
     * @param values The paths to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignAllPaths")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<kotlin.String, PathsProxy>.plusAssign(values: kotlin.collections.Iterable<kotlin.String>) {
      addAll(values)
    }
    /**
     * <pre>
     * If type == paths, then we will look here for a list of json paths to include
     * in the notification payload.
     * </pre>
     *
     * <code>repeated string paths = 3;</code>
     * @param index The index to set the value at.
     * @param value The paths to set.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("setPaths")
    public operator fun com.google.protobuf.kotlin.DslList<kotlin.String, PathsProxy>.set(index: kotlin.Int, value: kotlin.String) {
      _builder.setPaths(index, value)
    }/**
     * <pre>
     * If type == paths, then we will look here for a list of json paths to include
     * in the notification payload.
     * </pre>
     *
     * <code>repeated string paths = 3;</code>
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("clearPaths")
    public fun com.google.protobuf.kotlin.DslList<kotlin.String, PathsProxy>.clear() {
      _builder.clearPaths()
    }}
}
@kotlin.jvm.JvmSynthetic
public inline fun com.streamdal.protos.SpPipeline.PipelineStepNotification.copy(block: com.streamdal.protos.PipelineStepNotificationKt.Dsl.() -> kotlin.Unit): com.streamdal.protos.SpPipeline.PipelineStepNotification =
  com.streamdal.protos.PipelineStepNotificationKt.Dsl._create(this.toBuilder()).apply { block() }._build()

