//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: sp_internal.proto

package com.streamdal.protos;

@kotlin.jvm.JvmName("-initializeregisterRequest")
public inline fun registerRequest(block: com.streamdal.protos.RegisterRequestKt.Dsl.() -> kotlin.Unit): com.streamdal.protos.SpInternal.RegisterRequest =
  com.streamdal.protos.RegisterRequestKt.Dsl._create(com.streamdal.protos.SpInternal.RegisterRequest.newBuilder()).apply { block() }._build()
public object RegisterRequestKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: com.streamdal.protos.SpInternal.RegisterRequest.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: com.streamdal.protos.SpInternal.RegisterRequest.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): com.streamdal.protos.SpInternal.RegisterRequest = _builder.build()

    /**
     * <pre>
     * REQUIRED -- Name of the service that is registering.
     * </pre>
     *
     * <code>string service_name = 1;</code>
     */
    public var serviceName: kotlin.String
      @JvmName("getServiceName")
      get() = _builder.getServiceName()
      @JvmName("setServiceName")
      set(value) {
        _builder.setServiceName(value)
      }
    /**
     * <pre>
     * REQUIRED -- Name of the service that is registering.
     * </pre>
     *
     * <code>string service_name = 1;</code>
     */
    public fun clearServiceName() {
      _builder.clearServiceName()
    }

    /**
     * <pre>
     * REQUIRED -- Unique ID for this SDK instance.
     * This should be generated every time the SDK is instantiated (oe. every
     * time a NEW registration is performed).
     * </pre>
     *
     * <code>string session_id = 2;</code>
     */
    public var sessionId: kotlin.String
      @JvmName("getSessionId")
      get() = _builder.getSessionId()
      @JvmName("setSessionId")
      set(value) {
        _builder.setSessionId(value)
      }
    /**
     * <pre>
     * REQUIRED -- Unique ID for this SDK instance.
     * This should be generated every time the SDK is instantiated (oe. every
     * time a NEW registration is performed).
     * </pre>
     *
     * <code>string session_id = 2;</code>
     */
    public fun clearSessionId() {
      _builder.clearSessionId()
    }

    /**
     * <pre>
     * REQUIRED -- Info about the client (lib name, lang, os, arch, etc.)
     * </pre>
     *
     * <code>.protos.ClientInfo client_info = 3;</code>
     */
    public var clientInfo: com.streamdal.protos.SpInfo.ClientInfo
      @JvmName("getClientInfo")
      get() = _builder.getClientInfo()
      @JvmName("setClientInfo")
      set(value) {
        _builder.setClientInfo(value)
      }
    /**
     * <pre>
     * REQUIRED -- Info about the client (lib name, lang, os, arch, etc.)
     * </pre>
     *
     * <code>.protos.ClientInfo client_info = 3;</code>
     */
    public fun clearClientInfo() {
      _builder.clearClientInfo()
    }
    /**
     * <pre>
     * REQUIRED -- Info about the client (lib name, lang, os, arch, etc.)
     * </pre>
     *
     * <code>.protos.ClientInfo client_info = 3;</code>
     * @return Whether the clientInfo field is set.
     */
    public fun hasClientInfo(): kotlin.Boolean {
      return _builder.hasClientInfo()
    }

    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    public class AudiencesProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * <pre>
     * OPTIONAL -- if these are defined, these will show up in the UI even if
     * there is no active .Process() call from the SDK.
     * </pre>
     *
     * <code>repeated .protos.Audience audiences = 4;</code>
     */
     public val audiences: com.google.protobuf.kotlin.DslList<com.streamdal.protos.SpCommon.Audience, AudiencesProxy>
      @kotlin.jvm.JvmSynthetic
      get() = com.google.protobuf.kotlin.DslList(
        _builder.getAudiencesList()
      )
    /**
     * <pre>
     * OPTIONAL -- if these are defined, these will show up in the UI even if
     * there is no active .Process() call from the SDK.
     * </pre>
     *
     * <code>repeated .protos.Audience audiences = 4;</code>
     * @param value The audiences to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addAudiences")
    public fun com.google.protobuf.kotlin.DslList<com.streamdal.protos.SpCommon.Audience, AudiencesProxy>.add(value: com.streamdal.protos.SpCommon.Audience) {
      _builder.addAudiences(value)
    }
    /**
     * <pre>
     * OPTIONAL -- if these are defined, these will show up in the UI even if
     * there is no active .Process() call from the SDK.
     * </pre>
     *
     * <code>repeated .protos.Audience audiences = 4;</code>
     * @param value The audiences to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignAudiences")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<com.streamdal.protos.SpCommon.Audience, AudiencesProxy>.plusAssign(value: com.streamdal.protos.SpCommon.Audience) {
      add(value)
    }
    /**
     * <pre>
     * OPTIONAL -- if these are defined, these will show up in the UI even if
     * there is no active .Process() call from the SDK.
     * </pre>
     *
     * <code>repeated .protos.Audience audiences = 4;</code>
     * @param values The audiences to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addAllAudiences")
    public fun com.google.protobuf.kotlin.DslList<com.streamdal.protos.SpCommon.Audience, AudiencesProxy>.addAll(values: kotlin.collections.Iterable<com.streamdal.protos.SpCommon.Audience>) {
      _builder.addAllAudiences(values)
    }
    /**
     * <pre>
     * OPTIONAL -- if these are defined, these will show up in the UI even if
     * there is no active .Process() call from the SDK.
     * </pre>
     *
     * <code>repeated .protos.Audience audiences = 4;</code>
     * @param values The audiences to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignAllAudiences")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<com.streamdal.protos.SpCommon.Audience, AudiencesProxy>.plusAssign(values: kotlin.collections.Iterable<com.streamdal.protos.SpCommon.Audience>) {
      addAll(values)
    }
    /**
     * <pre>
     * OPTIONAL -- if these are defined, these will show up in the UI even if
     * there is no active .Process() call from the SDK.
     * </pre>
     *
     * <code>repeated .protos.Audience audiences = 4;</code>
     * @param index The index to set the value at.
     * @param value The audiences to set.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("setAudiences")
    public operator fun com.google.protobuf.kotlin.DslList<com.streamdal.protos.SpCommon.Audience, AudiencesProxy>.set(index: kotlin.Int, value: com.streamdal.protos.SpCommon.Audience) {
      _builder.setAudiences(index, value)
    }
    /**
     * <pre>
     * OPTIONAL -- if these are defined, these will show up in the UI even if
     * there is no active .Process() call from the SDK.
     * </pre>
     *
     * <code>repeated .protos.Audience audiences = 4;</code>
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("clearAudiences")
    public fun com.google.protobuf.kotlin.DslList<com.streamdal.protos.SpCommon.Audience, AudiencesProxy>.clear() {
      _builder.clearAudiences()
    }


    /**
     * <pre>
     * OPTIONAL -- If set, we know that any pipelines or steps executed in this
     * SDK will NOT modify the input/output data. As in, the SDK will log what it
     * _would_ do and always return the original data set.
     * </pre>
     *
     * <code>bool dry_run = 5;</code>
     */
    public var dryRun: kotlin.Boolean
      @JvmName("getDryRun")
      get() = _builder.getDryRun()
      @JvmName("setDryRun")
      set(value) {
        _builder.setDryRun(value)
      }
    /**
     * <pre>
     * OPTIONAL -- If set, we know that any pipelines or steps executed in this
     * SDK will NOT modify the input/output data. As in, the SDK will log what it
     * _would_ do and always return the original data set.
     * </pre>
     *
     * <code>bool dry_run = 5;</code>
     */
    public fun clearDryRun() {
      _builder.clearDryRun()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun com.streamdal.protos.SpInternal.RegisterRequest.copy(block: com.streamdal.protos.RegisterRequestKt.Dsl.() -> kotlin.Unit): com.streamdal.protos.SpInternal.RegisterRequest =
  com.streamdal.protos.RegisterRequestKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val com.streamdal.protos.SpInternal.RegisterRequestOrBuilder.clientInfoOrNull: com.streamdal.protos.SpInfo.ClientInfo?
  get() = if (hasClientInfo()) getClientInfo() else null

