//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: sp_external.proto

package com.streamdal.protos;

@kotlin.jvm.JvmName("-initializegetAllResponse")
public inline fun getAllResponse(block: com.streamdal.protos.GetAllResponseKt.Dsl.() -> kotlin.Unit): com.streamdal.protos.SpExternal.GetAllResponse =
  com.streamdal.protos.GetAllResponseKt.Dsl._create(com.streamdal.protos.SpExternal.GetAllResponse.newBuilder()).apply { block() }._build()
public object GetAllResponseKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: com.streamdal.protos.SpExternal.GetAllResponse.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: com.streamdal.protos.SpExternal.GetAllResponse.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): com.streamdal.protos.SpExternal.GetAllResponse = _builder.build()

    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    public class LiveProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * <pre>
     * Clients currently connected to the server
     * </pre>
     *
     * <code>repeated .protos.LiveInfo live = 1;</code>
     */
     public val live: com.google.protobuf.kotlin.DslList<com.streamdal.protos.SpInfo.LiveInfo, LiveProxy>
      @kotlin.jvm.JvmSynthetic
      get() = com.google.protobuf.kotlin.DslList(
        _builder.getLiveList()
      )
    /**
     * <pre>
     * Clients currently connected to the server
     * </pre>
     *
     * <code>repeated .protos.LiveInfo live = 1;</code>
     * @param value The live to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addLive")
    public fun com.google.protobuf.kotlin.DslList<com.streamdal.protos.SpInfo.LiveInfo, LiveProxy>.add(value: com.streamdal.protos.SpInfo.LiveInfo) {
      _builder.addLive(value)
    }
    /**
     * <pre>
     * Clients currently connected to the server
     * </pre>
     *
     * <code>repeated .protos.LiveInfo live = 1;</code>
     * @param value The live to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignLive")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<com.streamdal.protos.SpInfo.LiveInfo, LiveProxy>.plusAssign(value: com.streamdal.protos.SpInfo.LiveInfo) {
      add(value)
    }
    /**
     * <pre>
     * Clients currently connected to the server
     * </pre>
     *
     * <code>repeated .protos.LiveInfo live = 1;</code>
     * @param values The live to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addAllLive")
    public fun com.google.protobuf.kotlin.DslList<com.streamdal.protos.SpInfo.LiveInfo, LiveProxy>.addAll(values: kotlin.collections.Iterable<com.streamdal.protos.SpInfo.LiveInfo>) {
      _builder.addAllLive(values)
    }
    /**
     * <pre>
     * Clients currently connected to the server
     * </pre>
     *
     * <code>repeated .protos.LiveInfo live = 1;</code>
     * @param values The live to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignAllLive")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<com.streamdal.protos.SpInfo.LiveInfo, LiveProxy>.plusAssign(values: kotlin.collections.Iterable<com.streamdal.protos.SpInfo.LiveInfo>) {
      addAll(values)
    }
    /**
     * <pre>
     * Clients currently connected to the server
     * </pre>
     *
     * <code>repeated .protos.LiveInfo live = 1;</code>
     * @param index The index to set the value at.
     * @param value The live to set.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("setLive")
    public operator fun com.google.protobuf.kotlin.DslList<com.streamdal.protos.SpInfo.LiveInfo, LiveProxy>.set(index: kotlin.Int, value: com.streamdal.protos.SpInfo.LiveInfo) {
      _builder.setLive(index, value)
    }
    /**
     * <pre>
     * Clients currently connected to the server
     * </pre>
     *
     * <code>repeated .protos.LiveInfo live = 1;</code>
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("clearLive")
    public fun com.google.protobuf.kotlin.DslList<com.streamdal.protos.SpInfo.LiveInfo, LiveProxy>.clear() {
      _builder.clearLive()
    }


    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    public class AudiencesProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * <pre>
     * All of the audiences that are known to the server
     * </pre>
     *
     * <code>repeated .protos.Audience audiences = 2;</code>
     */
     public val audiences: com.google.protobuf.kotlin.DslList<com.streamdal.protos.SpCommon.Audience, AudiencesProxy>
      @kotlin.jvm.JvmSynthetic
      get() = com.google.protobuf.kotlin.DslList(
        _builder.getAudiencesList()
      )
    /**
     * <pre>
     * All of the audiences that are known to the server
     * </pre>
     *
     * <code>repeated .protos.Audience audiences = 2;</code>
     * @param value The audiences to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addAudiences")
    public fun com.google.protobuf.kotlin.DslList<com.streamdal.protos.SpCommon.Audience, AudiencesProxy>.add(value: com.streamdal.protos.SpCommon.Audience) {
      _builder.addAudiences(value)
    }
    /**
     * <pre>
     * All of the audiences that are known to the server
     * </pre>
     *
     * <code>repeated .protos.Audience audiences = 2;</code>
     * @param value The audiences to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignAudiences")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<com.streamdal.protos.SpCommon.Audience, AudiencesProxy>.plusAssign(value: com.streamdal.protos.SpCommon.Audience) {
      add(value)
    }
    /**
     * <pre>
     * All of the audiences that are known to the server
     * </pre>
     *
     * <code>repeated .protos.Audience audiences = 2;</code>
     * @param values The audiences to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addAllAudiences")
    public fun com.google.protobuf.kotlin.DslList<com.streamdal.protos.SpCommon.Audience, AudiencesProxy>.addAll(values: kotlin.collections.Iterable<com.streamdal.protos.SpCommon.Audience>) {
      _builder.addAllAudiences(values)
    }
    /**
     * <pre>
     * All of the audiences that are known to the server
     * </pre>
     *
     * <code>repeated .protos.Audience audiences = 2;</code>
     * @param values The audiences to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignAllAudiences")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<com.streamdal.protos.SpCommon.Audience, AudiencesProxy>.plusAssign(values: kotlin.collections.Iterable<com.streamdal.protos.SpCommon.Audience>) {
      addAll(values)
    }
    /**
     * <pre>
     * All of the audiences that are known to the server
     * </pre>
     *
     * <code>repeated .protos.Audience audiences = 2;</code>
     * @param index The index to set the value at.
     * @param value The audiences to set.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("setAudiences")
    public operator fun com.google.protobuf.kotlin.DslList<com.streamdal.protos.SpCommon.Audience, AudiencesProxy>.set(index: kotlin.Int, value: com.streamdal.protos.SpCommon.Audience) {
      _builder.setAudiences(index, value)
    }
    /**
     * <pre>
     * All of the audiences that are known to the server
     * </pre>
     *
     * <code>repeated .protos.Audience audiences = 2;</code>
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("clearAudiences")
    public fun com.google.protobuf.kotlin.DslList<com.streamdal.protos.SpCommon.Audience, AudiencesProxy>.clear() {
      _builder.clearAudiences()
    }


    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    public class PipelinesProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * <pre>
     * All of the pipelines known to the server + pipeline &lt;-&gt; audience mappings
     * key == pipeline_id; if "Audience" is not filled out - pipeline is not attached
     * to any audience.
     * </pre>
     *
     * <code>map&lt;string, .protos.PipelineInfo&gt; pipelines = 3;</code>
     */
     public val pipelines: com.google.protobuf.kotlin.DslMap<kotlin.String, com.streamdal.protos.SpInfo.PipelineInfo, PipelinesProxy>
      @kotlin.jvm.JvmSynthetic
      @JvmName("getPipelinesMap")
      get() = com.google.protobuf.kotlin.DslMap(
        _builder.getPipelinesMap()
      )
    /**
     * <pre>
     * All of the pipelines known to the server + pipeline &lt;-&gt; audience mappings
     * key == pipeline_id; if "Audience" is not filled out - pipeline is not attached
     * to any audience.
     * </pre>
     *
     * <code>map&lt;string, .protos.PipelineInfo&gt; pipelines = 3;</code>
     */
    @JvmName("putPipelines")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, com.streamdal.protos.SpInfo.PipelineInfo, PipelinesProxy>
      .put(key: kotlin.String, value: com.streamdal.protos.SpInfo.PipelineInfo) {
         _builder.putPipelines(key, value)
       }
    /**
     * <pre>
     * All of the pipelines known to the server + pipeline &lt;-&gt; audience mappings
     * key == pipeline_id; if "Audience" is not filled out - pipeline is not attached
     * to any audience.
     * </pre>
     *
     * <code>map&lt;string, .protos.PipelineInfo&gt; pipelines = 3;</code>
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("setPipelines")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslMap<kotlin.String, com.streamdal.protos.SpInfo.PipelineInfo, PipelinesProxy>
      .set(key: kotlin.String, value: com.streamdal.protos.SpInfo.PipelineInfo) {
         put(key, value)
       }
    /**
     * <pre>
     * All of the pipelines known to the server + pipeline &lt;-&gt; audience mappings
     * key == pipeline_id; if "Audience" is not filled out - pipeline is not attached
     * to any audience.
     * </pre>
     *
     * <code>map&lt;string, .protos.PipelineInfo&gt; pipelines = 3;</code>
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("removePipelines")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, com.streamdal.protos.SpInfo.PipelineInfo, PipelinesProxy>
      .remove(key: kotlin.String) {
         _builder.removePipelines(key)
       }
    /**
     * <pre>
     * All of the pipelines known to the server + pipeline &lt;-&gt; audience mappings
     * key == pipeline_id; if "Audience" is not filled out - pipeline is not attached
     * to any audience.
     * </pre>
     *
     * <code>map&lt;string, .protos.PipelineInfo&gt; pipelines = 3;</code>
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("putAllPipelines")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, com.streamdal.protos.SpInfo.PipelineInfo, PipelinesProxy>
      .putAll(map: kotlin.collections.Map<kotlin.String, com.streamdal.protos.SpInfo.PipelineInfo>) {
         _builder.putAllPipelines(map)
       }
    /**
     * <pre>
     * All of the pipelines known to the server + pipeline &lt;-&gt; audience mappings
     * key == pipeline_id; if "Audience" is not filled out - pipeline is not attached
     * to any audience.
     * </pre>
     *
     * <code>map&lt;string, .protos.PipelineInfo&gt; pipelines = 3;</code>
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("clearPipelines")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, com.streamdal.protos.SpInfo.PipelineInfo, PipelinesProxy>
      .clear() {
         _builder.clearPipelines()
       }

    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    public class ConfigsProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * <pre>
     * Audience to pipeline mapping config; key == $audience_as_string
     * </pre>
     *
     * <code>map&lt;string, .protos.PipelineConfigs&gt; configs = 4;</code>
     */
     public val configs: com.google.protobuf.kotlin.DslMap<kotlin.String, com.streamdal.protos.SpPipeline.PipelineConfigs, ConfigsProxy>
      @kotlin.jvm.JvmSynthetic
      @JvmName("getConfigsMap")
      get() = com.google.protobuf.kotlin.DslMap(
        _builder.getConfigsMap()
      )
    /**
     * <pre>
     * Audience to pipeline mapping config; key == $audience_as_string
     * </pre>
     *
     * <code>map&lt;string, .protos.PipelineConfigs&gt; configs = 4;</code>
     */
    @JvmName("putConfigs")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, com.streamdal.protos.SpPipeline.PipelineConfigs, ConfigsProxy>
      .put(key: kotlin.String, value: com.streamdal.protos.SpPipeline.PipelineConfigs) {
         _builder.putConfigs(key, value)
       }
    /**
     * <pre>
     * Audience to pipeline mapping config; key == $audience_as_string
     * </pre>
     *
     * <code>map&lt;string, .protos.PipelineConfigs&gt; configs = 4;</code>
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("setConfigs")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslMap<kotlin.String, com.streamdal.protos.SpPipeline.PipelineConfigs, ConfigsProxy>
      .set(key: kotlin.String, value: com.streamdal.protos.SpPipeline.PipelineConfigs) {
         put(key, value)
       }
    /**
     * <pre>
     * Audience to pipeline mapping config; key == $audience_as_string
     * </pre>
     *
     * <code>map&lt;string, .protos.PipelineConfigs&gt; configs = 4;</code>
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("removeConfigs")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, com.streamdal.protos.SpPipeline.PipelineConfigs, ConfigsProxy>
      .remove(key: kotlin.String) {
         _builder.removeConfigs(key)
       }
    /**
     * <pre>
     * Audience to pipeline mapping config; key == $audience_as_string
     * </pre>
     *
     * <code>map&lt;string, .protos.PipelineConfigs&gt; configs = 4;</code>
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("putAllConfigs")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, com.streamdal.protos.SpPipeline.PipelineConfigs, ConfigsProxy>
      .putAll(map: kotlin.collections.Map<kotlin.String, com.streamdal.protos.SpPipeline.PipelineConfigs>) {
         _builder.putAllConfigs(map)
       }
    /**
     * <pre>
     * Audience to pipeline mapping config; key == $audience_as_string
     * </pre>
     *
     * <code>map&lt;string, .protos.PipelineConfigs&gt; configs = 4;</code>
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("clearConfigs")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, com.streamdal.protos.SpPipeline.PipelineConfigs, ConfigsProxy>
      .clear() {
         _builder.clearConfigs()
       }

    /**
     * <pre>
     * When was this response generated. This is useful for determining what is
     * the latest update when using GetAllStream().
     * </pre>
     *
     * <code>int64 generated_at_unix_ts_ns_utc = 100;</code>
     */
    public var generatedAtUnixTsNsUtc: kotlin.Long
      @JvmName("getGeneratedAtUnixTsNsUtc")
      get() = _builder.getGeneratedAtUnixTsNsUtc()
      @JvmName("setGeneratedAtUnixTsNsUtc")
      set(value) {
        _builder.setGeneratedAtUnixTsNsUtc(value)
      }
    /**
     * <pre>
     * When was this response generated. This is useful for determining what is
     * the latest update when using GetAllStream().
     * </pre>
     *
     * <code>int64 generated_at_unix_ts_ns_utc = 100;</code>
     */
    public fun clearGeneratedAtUnixTsNsUtc() {
      _builder.clearGeneratedAtUnixTsNsUtc()
    }

    /**
     * <pre>
     * Set by server to indicate that the response is a keepalive message
     * </pre>
     *
     * <code>optional bool _keepalive = 1000;</code>
     */
    public var Keepalive: kotlin.Boolean
      @JvmName("getKeepalive")
      get() = _builder.getKeepalive()
      @JvmName("setKeepalive")
      set(value) {
        _builder.setKeepalive(value)
      }
    /**
     * <pre>
     * Set by server to indicate that the response is a keepalive message
     * </pre>
     *
     * <code>optional bool _keepalive = 1000;</code>
     */
    public fun clearKeepalive() {
      _builder.clearKeepalive()
    }
    /**
     * <pre>
     * Set by server to indicate that the response is a keepalive message
     * </pre>
     *
     * <code>optional bool _keepalive = 1000;</code>
     * @return Whether the keepalive field is set.
     */
    public fun hasKeepalive(): kotlin.Boolean {
      return _builder.hasKeepalive()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun com.streamdal.protos.SpExternal.GetAllResponse.copy(block: com.streamdal.protos.GetAllResponseKt.Dsl.() -> kotlin.Unit): com.streamdal.protos.SpExternal.GetAllResponse =
  com.streamdal.protos.GetAllResponseKt.Dsl._create(this.toBuilder()).apply { block() }._build()

