//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: sp_common.proto

package com.streamdal.protos;

@kotlin.jvm.JvmName("-initializeaudience")
public inline fun audience(block: com.streamdal.protos.AudienceKt.Dsl.() -> kotlin.Unit): com.streamdal.protos.SpCommon.Audience =
  com.streamdal.protos.AudienceKt.Dsl._create(com.streamdal.protos.SpCommon.Audience.newBuilder()).apply { block() }._build()
public object AudienceKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: com.streamdal.protos.SpCommon.Audience.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: com.streamdal.protos.SpCommon.Audience.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): com.streamdal.protos.SpCommon.Audience = _builder.build()

    /**
     * <pre>
     * Name of the service -- let's include the service name on all calls, we can
     * optimize later ~DS
     * </pre>
     *
     * <code>string service_name = 1;</code>
     */
    public var serviceName: kotlin.String
      @JvmName("getServiceName")
      get() = _builder.getServiceName()
      @JvmName("setServiceName")
      set(value) {
        _builder.setServiceName(value)
      }
    /**
     * <pre>
     * Name of the service -- let's include the service name on all calls, we can
     * optimize later ~DS
     * </pre>
     *
     * <code>string service_name = 1;</code>
     */
    public fun clearServiceName() {
      _builder.clearServiceName()
    }

    /**
     * <pre>
     * Name of the component the SDK is interacting with (ie. kafka-$topic-name)
     * </pre>
     *
     * <code>string component_name = 2;</code>
     */
    public var componentName: kotlin.String
      @JvmName("getComponentName")
      get() = _builder.getComponentName()
      @JvmName("setComponentName")
      set(value) {
        _builder.setComponentName(value)
      }
    /**
     * <pre>
     * Name of the component the SDK is interacting with (ie. kafka-$topic-name)
     * </pre>
     *
     * <code>string component_name = 2;</code>
     */
    public fun clearComponentName() {
      _builder.clearComponentName()
    }

    /**
     * <pre>
     * Consumer or Producer
     * </pre>
     *
     * <code>.protos.OperationType operation_type = 3;</code>
     */
    public var operationType: com.streamdal.protos.SpCommon.OperationType
      @JvmName("getOperationType")
      get() = _builder.getOperationType()
      @JvmName("setOperationType")
      set(value) {
        _builder.setOperationType(value)
      }
    /**
     * <pre>
     * Consumer or Producer
     * </pre>
     *
     * <code>.protos.OperationType operation_type = 3;</code>
     */
    public fun clearOperationType() {
      _builder.clearOperationType()
    }

    /**
     * <pre>
     * Name for the consumer or producer
     * </pre>
     *
     * <code>string operation_name = 4;</code>
     */
    public var operationName: kotlin.String
      @JvmName("getOperationName")
      get() = _builder.getOperationName()
      @JvmName("setOperationName")
      set(value) {
        _builder.setOperationName(value)
      }
    /**
     * <pre>
     * Name for the consumer or producer
     * </pre>
     *
     * <code>string operation_name = 4;</code>
     */
    public fun clearOperationName() {
      _builder.clearOperationName()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun com.streamdal.protos.SpCommon.Audience.copy(block: com.streamdal.protos.AudienceKt.Dsl.() -> kotlin.Unit): com.streamdal.protos.SpCommon.Audience =
  com.streamdal.protos.AudienceKt.Dsl._create(this.toBuilder()).apply { block() }._build()

