//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: sp_common.proto

package com.streamdal.protos;

@kotlin.jvm.JvmName("-initializetailRequest")
public inline fun tailRequest(block: com.streamdal.protos.TailRequestKt.Dsl.() -> kotlin.Unit): com.streamdal.protos.SpCommon.TailRequest =
  com.streamdal.protos.TailRequestKt.Dsl._create(com.streamdal.protos.SpCommon.TailRequest.newBuilder()).apply { block() }._build()
public object TailRequestKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: com.streamdal.protos.SpCommon.TailRequest.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: com.streamdal.protos.SpCommon.TailRequest.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): com.streamdal.protos.SpCommon.TailRequest = _builder.build()

    /**
     * <code>.protos.TailRequestType type = 1;</code>
     */
    public var type: com.streamdal.protos.SpCommon.TailRequestType
      @JvmName("getType")
      get() = _builder.getType()
      @JvmName("setType")
      set(value) {
        _builder.setType(value)
      }
    /**
     * <code>.protos.TailRequestType type = 1;</code>
     */
    public fun clearType() {
      _builder.clearType()
    }

    /**
     * <code>string id = 2;</code>
     */
    public var id: kotlin.String
      @JvmName("getId")
      get() = _builder.getId()
      @JvmName("setId")
      set(value) {
        _builder.setId(value)
      }
    /**
     * <code>string id = 2;</code>
     */
    public fun clearId() {
      _builder.clearId()
    }

    /**
     * <code>.protos.Audience audience = 3;</code>
     */
    public var audience: com.streamdal.protos.SpCommon.Audience
      @JvmName("getAudience")
      get() = _builder.getAudience()
      @JvmName("setAudience")
      set(value) {
        _builder.setAudience(value)
      }
    /**
     * <code>.protos.Audience audience = 3;</code>
     */
    public fun clearAudience() {
      _builder.clearAudience()
    }
    /**
     * <code>.protos.Audience audience = 3;</code>
     * @return Whether the audience field is set.
     */
    public fun hasAudience(): kotlin.Boolean {
      return _builder.hasAudience()
    }

    /**
     * <code>optional string pipeline_id = 4 [deprecated = true];</code>
     */
    @kotlin.Deprecated(message = "Field pipelineId is deprecated") public var pipelineId: kotlin.String
      @JvmName("getPipelineId")
      get() = _builder.getPipelineId()
      @JvmName("setPipelineId")
      set(value) {
        _builder.setPipelineId(value)
      }
    /**
     * <code>optional string pipeline_id = 4 [deprecated = true];</code>
     * @deprecated protos.TailRequest.pipeline_id is deprecated.
     *     See sp_common.proto;l=59
     */
    public fun clearPipelineId() {
      _builder.clearPipelineId()
    }
    /**
     * <code>optional string pipeline_id = 4 [deprecated = true];</code>
     * @deprecated protos.TailRequest.pipeline_id is deprecated.
     *     See sp_common.proto;l=59
     * @return Whether the pipelineId field is set.
     */
    public fun hasPipelineId(): kotlin.Boolean {
      return _builder.hasPipelineId()
    }

    /**
     * <code>.protos.SampleOptions sample_options = 5;</code>
     */
    public var sampleOptions: com.streamdal.protos.SpCommon.SampleOptions
      @JvmName("getSampleOptions")
      get() = _builder.getSampleOptions()
      @JvmName("setSampleOptions")
      set(value) {
        _builder.setSampleOptions(value)
      }
    /**
     * <code>.protos.SampleOptions sample_options = 5;</code>
     */
    public fun clearSampleOptions() {
      _builder.clearSampleOptions()
    }
    /**
     * <code>.protos.SampleOptions sample_options = 5;</code>
     * @return Whether the sampleOptions field is set.
     */
    public fun hasSampleOptions(): kotlin.Boolean {
      return _builder.hasSampleOptions()
    }

    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    public class MetadataProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * <pre>
     * protolint:disable:this FIELD_NAMES_LOWER_SNAKE_CASE
     * </pre>
     *
     * <code>map&lt;string, string&gt; _metadata = 1000;</code>
     */
     public val Metadata: com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.String, MetadataProxy>
      @kotlin.jvm.JvmSynthetic
      @JvmName("getMetadataMap")
      get() = com.google.protobuf.kotlin.DslMap(
        _builder.getMetadataMap()
      )
    /**
     * <pre>
     * protolint:disable:this FIELD_NAMES_LOWER_SNAKE_CASE
     * </pre>
     *
     * <code>map&lt;string, string&gt; _metadata = 1000;</code>
     */
    @JvmName("putMetadata")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.String, MetadataProxy>
      .put(key: kotlin.String, value: kotlin.String) {
         _builder.putMetadata(key, value)
       }
    /**
     * <pre>
     * protolint:disable:this FIELD_NAMES_LOWER_SNAKE_CASE
     * </pre>
     *
     * <code>map&lt;string, string&gt; _metadata = 1000;</code>
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("setMetadata")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.String, MetadataProxy>
      .set(key: kotlin.String, value: kotlin.String) {
         put(key, value)
       }
    /**
     * <pre>
     * protolint:disable:this FIELD_NAMES_LOWER_SNAKE_CASE
     * </pre>
     *
     * <code>map&lt;string, string&gt; _metadata = 1000;</code>
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("removeMetadata")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.String, MetadataProxy>
      .remove(key: kotlin.String) {
         _builder.removeMetadata(key)
       }
    /**
     * <pre>
     * protolint:disable:this FIELD_NAMES_LOWER_SNAKE_CASE
     * </pre>
     *
     * <code>map&lt;string, string&gt; _metadata = 1000;</code>
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("putAllMetadata")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.String, MetadataProxy>
      .putAll(map: kotlin.collections.Map<kotlin.String, kotlin.String>) {
         _builder.putAllMetadata(map)
       }
    /**
     * <pre>
     * protolint:disable:this FIELD_NAMES_LOWER_SNAKE_CASE
     * </pre>
     *
     * <code>map&lt;string, string&gt; _metadata = 1000;</code>
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("clearMetadata")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.String, MetadataProxy>
      .clear() {
         _builder.clearMetadata()
       }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun com.streamdal.protos.SpCommon.TailRequest.copy(block: com.streamdal.protos.TailRequestKt.Dsl.() -> kotlin.Unit): com.streamdal.protos.SpCommon.TailRequest =
  com.streamdal.protos.TailRequestKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val com.streamdal.protos.SpCommon.TailRequestOrBuilder.audienceOrNull: com.streamdal.protos.SpCommon.Audience?
  get() = if (hasAudience()) getAudience() else null

public val com.streamdal.protos.SpCommon.TailRequestOrBuilder.sampleOptionsOrNull: com.streamdal.protos.SpCommon.SampleOptions?
  get() = if (hasSampleOptions()) getSampleOptions() else null

