//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: sp_notify.proto

package com.streamdal.protos;

@kotlin.jvm.JvmName("-initializenotificationSlack")
public inline fun notificationSlack(block: com.streamdal.protos.NotificationSlackKt.Dsl.() -> kotlin.Unit): com.streamdal.protos.SpNotify.NotificationSlack =
  com.streamdal.protos.NotificationSlackKt.Dsl._create(com.streamdal.protos.SpNotify.NotificationSlack.newBuilder()).apply { block() }._build()
public object NotificationSlackKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: com.streamdal.protos.SpNotify.NotificationSlack.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: com.streamdal.protos.SpNotify.NotificationSlack.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): com.streamdal.protos.SpNotify.NotificationSlack = _builder.build()

    /**
     * <code>string bot_token = 1;</code>
     */
    public var botToken: kotlin.String
      @JvmName("getBotToken")
      get() = _builder.getBotToken()
      @JvmName("setBotToken")
      set(value) {
        _builder.setBotToken(value)
      }
    /**
     * <code>string bot_token = 1;</code>
     */
    public fun clearBotToken() {
      _builder.clearBotToken()
    }

    /**
     * <code>string channel = 2;</code>
     */
    public var channel: kotlin.String
      @JvmName("getChannel")
      get() = _builder.getChannel()
      @JvmName("setChannel")
      set(value) {
        _builder.setChannel(value)
      }
    /**
     * <code>string channel = 2;</code>
     */
    public fun clearChannel() {
      _builder.clearChannel()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun com.streamdal.protos.SpNotify.NotificationSlack.copy(block: com.streamdal.protos.NotificationSlackKt.Dsl.() -> kotlin.Unit): com.streamdal.protos.SpNotify.NotificationSlack =
  com.streamdal.protos.NotificationSlackKt.Dsl._create(this.toBuilder()).apply { block() }._build()

