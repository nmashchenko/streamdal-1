// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `steps/sp_steps_inferschema.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

///  InferSchemaStep is a step that infers the schema of a payload.
///  It is designed to be used directly by the SDK rather than in a pipeline, so that
///  we can support schema inference without the need for pipelines to be created
// @@protoc_insertion_point(message:protos.steps.InferSchemaStep)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct InferSchemaStep {
    // message fields
    // @@protoc_insertion_point(field:protos.steps.InferSchemaStep.current_schema)
    pub current_schema: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:protos.steps.InferSchemaStep.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a InferSchemaStep {
    fn default() -> &'a InferSchemaStep {
        <InferSchemaStep as ::protobuf::Message>::default_instance()
    }
}

impl InferSchemaStep {
    pub fn new() -> InferSchemaStep {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "current_schema",
            |m: &InferSchemaStep| { &m.current_schema },
            |m: &mut InferSchemaStep| { &mut m.current_schema },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<InferSchemaStep>(
            "InferSchemaStep",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for InferSchemaStep {
    const NAME: &'static str = "InferSchemaStep";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.current_schema = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.current_schema.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.current_schema);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.current_schema.is_empty() {
            os.write_bytes(1, &self.current_schema)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> InferSchemaStep {
        InferSchemaStep::new()
    }

    fn clear(&mut self) {
        self.current_schema.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static InferSchemaStep {
        static instance: InferSchemaStep = InferSchemaStep {
            current_schema: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for InferSchemaStep {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("InferSchemaStep").unwrap()).clone()
    }
}

impl ::std::fmt::Display for InferSchemaStep {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for InferSchemaStep {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x20steps/sp_steps_inferschema.proto\x12\x0cprotos.steps\"8\n\x0fInfer\
    SchemaStep\x12%\n\x0ecurrent_schema\x18\x01\x20\x01(\x0cR\rcurrentSchema\
    BVZ@github.com/streamdal/streamdal/libs/protos/build/go/protos/steps\xea\
    \x02\x11Streamdal::ProtosJ\xf9\x02\n\x06\x12\x04\0\0\x0c\x01\n\x08\n\x01\
    \x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x02\0\x15\n\x08\n\x01\x08\
    \x12\x03\x04\0W\n\t\n\x02\x08\x0b\x12\x03\x04\0W\n\x08\n\x01\x08\x12\x03\
    \x05\0*\n\t\n\x02\x08-\x12\x03\x05\0*\n\xed\x01\n\x02\x04\0\x12\x04\n\0\
    \x0c\x01\x1a\xe0\x01\x20InferSchemaStep\x20is\x20a\x20step\x20that\x20in\
    fers\x20the\x20schema\x20of\x20a\x20payload.\n\x20It\x20is\x20designed\
    \x20to\x20be\x20used\x20directly\x20by\x20the\x20SDK\x20rather\x20than\
    \x20in\x20a\x20pipeline,\x20so\x20that\n\x20we\x20can\x20support\x20sche\
    ma\x20inference\x20without\x20the\x20need\x20for\x20pipelines\x20to\x20b\
    e\x20created\n\n\n\n\x03\x04\0\x01\x12\x03\n\x08\x17\n\x0b\n\x04\x04\0\
    \x02\0\x12\x03\x0b\x02\x1b\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\x0b\x02\
    \x07\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x0b\x08\x16\n\x0c\n\x05\x04\0\
    \x02\0\x03\x12\x03\x0b\x19\x1ab\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(InferSchemaStep::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
