// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `sp_command.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

///  Command is used by streamdal server for sending commands to SDKs
// @@protoc_insertion_point(message:protos.Command)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Command {
    // message fields
    ///  Who is this command intended for?
    ///  NOTE: Some commands (such as KeepAliveCommand, KVCommand) do NOT use audience and will ignore it
    // @@protoc_insertion_point(field:protos.Command.audience)
    pub audience: ::protobuf::MessageField<super::sp_common::Audience>,
    // message oneof groups
    pub command: ::std::option::Option<command::Command>,
    // special fields
    // @@protoc_insertion_point(special_field:protos.Command.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Command {
    fn default() -> &'a Command {
        <Command as ::protobuf::Message>::default_instance()
    }
}

impl Command {
    pub fn new() -> Command {
        ::std::default::Default::default()
    }

    // .protos.SetPipelinesCommand set_pipelines = 100;

    pub fn set_pipelines(&self) -> &SetPipelinesCommand {
        match self.command {
            ::std::option::Option::Some(command::Command::SetPipelines(ref v)) => v,
            _ => <SetPipelinesCommand as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_set_pipelines(&mut self) {
        self.command = ::std::option::Option::None;
    }

    pub fn has_set_pipelines(&self) -> bool {
        match self.command {
            ::std::option::Option::Some(command::Command::SetPipelines(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_set_pipelines(&mut self, v: SetPipelinesCommand) {
        self.command = ::std::option::Option::Some(command::Command::SetPipelines(v))
    }

    // Mutable pointer to the field.
    pub fn mut_set_pipelines(&mut self) -> &mut SetPipelinesCommand {
        if let ::std::option::Option::Some(command::Command::SetPipelines(_)) = self.command {
        } else {
            self.command = ::std::option::Option::Some(command::Command::SetPipelines(SetPipelinesCommand::new()));
        }
        match self.command {
            ::std::option::Option::Some(command::Command::SetPipelines(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_set_pipelines(&mut self) -> SetPipelinesCommand {
        if self.has_set_pipelines() {
            match self.command.take() {
                ::std::option::Option::Some(command::Command::SetPipelines(v)) => v,
                _ => panic!(),
            }
        } else {
            SetPipelinesCommand::new()
        }
    }

    // .protos.KeepAliveCommand keep_alive = 101;

    pub fn keep_alive(&self) -> &KeepAliveCommand {
        match self.command {
            ::std::option::Option::Some(command::Command::KeepAlive(ref v)) => v,
            _ => <KeepAliveCommand as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_keep_alive(&mut self) {
        self.command = ::std::option::Option::None;
    }

    pub fn has_keep_alive(&self) -> bool {
        match self.command {
            ::std::option::Option::Some(command::Command::KeepAlive(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_keep_alive(&mut self, v: KeepAliveCommand) {
        self.command = ::std::option::Option::Some(command::Command::KeepAlive(v))
    }

    // Mutable pointer to the field.
    pub fn mut_keep_alive(&mut self) -> &mut KeepAliveCommand {
        if let ::std::option::Option::Some(command::Command::KeepAlive(_)) = self.command {
        } else {
            self.command = ::std::option::Option::Some(command::Command::KeepAlive(KeepAliveCommand::new()));
        }
        match self.command {
            ::std::option::Option::Some(command::Command::KeepAlive(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_keep_alive(&mut self) -> KeepAliveCommand {
        if self.has_keep_alive() {
            match self.command.take() {
                ::std::option::Option::Some(command::Command::KeepAlive(v)) => v,
                _ => panic!(),
            }
        } else {
            KeepAliveCommand::new()
        }
    }

    // .protos.KVCommand kv = 102;

    pub fn kv(&self) -> &KVCommand {
        match self.command {
            ::std::option::Option::Some(command::Command::Kv(ref v)) => v,
            _ => <KVCommand as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_kv(&mut self) {
        self.command = ::std::option::Option::None;
    }

    pub fn has_kv(&self) -> bool {
        match self.command {
            ::std::option::Option::Some(command::Command::Kv(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_kv(&mut self, v: KVCommand) {
        self.command = ::std::option::Option::Some(command::Command::Kv(v))
    }

    // Mutable pointer to the field.
    pub fn mut_kv(&mut self) -> &mut KVCommand {
        if let ::std::option::Option::Some(command::Command::Kv(_)) = self.command {
        } else {
            self.command = ::std::option::Option::Some(command::Command::Kv(KVCommand::new()));
        }
        match self.command {
            ::std::option::Option::Some(command::Command::Kv(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_kv(&mut self) -> KVCommand {
        if self.has_kv() {
            match self.command.take() {
                ::std::option::Option::Some(command::Command::Kv(v)) => v,
                _ => panic!(),
            }
        } else {
            KVCommand::new()
        }
    }

    // .protos.TailCommand tail = 103;

    pub fn tail(&self) -> &TailCommand {
        match self.command {
            ::std::option::Option::Some(command::Command::Tail(ref v)) => v,
            _ => <TailCommand as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_tail(&mut self) {
        self.command = ::std::option::Option::None;
    }

    pub fn has_tail(&self) -> bool {
        match self.command {
            ::std::option::Option::Some(command::Command::Tail(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_tail(&mut self, v: TailCommand) {
        self.command = ::std::option::Option::Some(command::Command::Tail(v))
    }

    // Mutable pointer to the field.
    pub fn mut_tail(&mut self) -> &mut TailCommand {
        if let ::std::option::Option::Some(command::Command::Tail(_)) = self.command {
        } else {
            self.command = ::std::option::Option::Some(command::Command::Tail(TailCommand::new()));
        }
        match self.command {
            ::std::option::Option::Some(command::Command::Tail(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_tail(&mut self) -> TailCommand {
        if self.has_tail() {
            match self.command.take() {
                ::std::option::Option::Some(command::Command::Tail(v)) => v,
                _ => panic!(),
            }
        } else {
            TailCommand::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::sp_common::Audience>(
            "audience",
            |m: &Command| { &m.audience },
            |m: &mut Command| { &mut m.audience },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, SetPipelinesCommand>(
            "set_pipelines",
            Command::has_set_pipelines,
            Command::set_pipelines,
            Command::mut_set_pipelines,
            Command::set_set_pipelines,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, KeepAliveCommand>(
            "keep_alive",
            Command::has_keep_alive,
            Command::keep_alive,
            Command::mut_keep_alive,
            Command::set_keep_alive,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, KVCommand>(
            "kv",
            Command::has_kv,
            Command::kv,
            Command::mut_kv,
            Command::set_kv,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, TailCommand>(
            "tail",
            Command::has_tail,
            Command::tail,
            Command::mut_tail,
            Command::set_tail,
        ));
        oneofs.push(command::Command::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Command>(
            "Command",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Command {
    const NAME: &'static str = "Command";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.audience)?;
                },
                802 => {
                    self.command = ::std::option::Option::Some(command::Command::SetPipelines(is.read_message()?));
                },
                810 => {
                    self.command = ::std::option::Option::Some(command::Command::KeepAlive(is.read_message()?));
                },
                818 => {
                    self.command = ::std::option::Option::Some(command::Command::Kv(is.read_message()?));
                },
                826 => {
                    self.command = ::std::option::Option::Some(command::Command::Tail(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.audience.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let ::std::option::Option::Some(ref v) = self.command {
            match v {
                &command::Command::SetPipelines(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &command::Command::KeepAlive(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &command::Command::Kv(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &command::Command::Tail(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.audience.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let ::std::option::Option::Some(ref v) = self.command {
            match v {
                &command::Command::SetPipelines(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(100, v, os)?;
                },
                &command::Command::KeepAlive(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(101, v, os)?;
                },
                &command::Command::Kv(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(102, v, os)?;
                },
                &command::Command::Tail(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(103, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Command {
        Command::new()
    }

    fn clear(&mut self) {
        self.audience.clear();
        self.command = ::std::option::Option::None;
        self.command = ::std::option::Option::None;
        self.command = ::std::option::Option::None;
        self.command = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Command {
        static instance: Command = Command {
            audience: ::protobuf::MessageField::none(),
            command: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Command {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Command").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Command {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Command {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `Command`
pub mod command {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:protos.Command.command)
    pub enum Command {
        // @@protoc_insertion_point(oneof_field:protos.Command.set_pipelines)
        SetPipelines(super::SetPipelinesCommand),
        // @@protoc_insertion_point(oneof_field:protos.Command.keep_alive)
        KeepAlive(super::KeepAliveCommand),
        // @@protoc_insertion_point(oneof_field:protos.Command.kv)
        Kv(super::KVCommand),
        // @@protoc_insertion_point(oneof_field:protos.Command.tail)
        Tail(super::TailCommand),
    }

    impl ::protobuf::Oneof for Command {
    }

    impl ::protobuf::OneofFull for Command {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::Command as ::protobuf::MessageFull>::descriptor().oneof_by_name("command").unwrap()).clone()
        }
    }

    impl Command {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Command>("command")
        }
    }
}

// @@protoc_insertion_point(message:protos.SetPipelinesCommand)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct SetPipelinesCommand {
    // message fields
    // @@protoc_insertion_point(field:protos.SetPipelinesCommand.pipelines)
    pub pipelines: ::std::vec::Vec<super::sp_pipeline::Pipeline>,
    // special fields
    // @@protoc_insertion_point(special_field:protos.SetPipelinesCommand.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SetPipelinesCommand {
    fn default() -> &'a SetPipelinesCommand {
        <SetPipelinesCommand as ::protobuf::Message>::default_instance()
    }
}

impl SetPipelinesCommand {
    pub fn new() -> SetPipelinesCommand {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "pipelines",
            |m: &SetPipelinesCommand| { &m.pipelines },
            |m: &mut SetPipelinesCommand| { &mut m.pipelines },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SetPipelinesCommand>(
            "SetPipelinesCommand",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SetPipelinesCommand {
    const NAME: &'static str = "SetPipelinesCommand";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.pipelines.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.pipelines {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.pipelines {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SetPipelinesCommand {
        SetPipelinesCommand::new()
    }

    fn clear(&mut self) {
        self.pipelines.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SetPipelinesCommand {
        static instance: SetPipelinesCommand = SetPipelinesCommand {
            pipelines: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for SetPipelinesCommand {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SetPipelinesCommand").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SetPipelinesCommand {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SetPipelinesCommand {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:protos.KeepAliveCommand)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct KeepAliveCommand {
    // special fields
    // @@protoc_insertion_point(special_field:protos.KeepAliveCommand.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a KeepAliveCommand {
    fn default() -> &'a KeepAliveCommand {
        <KeepAliveCommand as ::protobuf::Message>::default_instance()
    }
}

impl KeepAliveCommand {
    pub fn new() -> KeepAliveCommand {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<KeepAliveCommand>(
            "KeepAliveCommand",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for KeepAliveCommand {
    const NAME: &'static str = "KeepAliveCommand";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> KeepAliveCommand {
        KeepAliveCommand::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static KeepAliveCommand {
        static instance: KeepAliveCommand = KeepAliveCommand {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for KeepAliveCommand {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("KeepAliveCommand").unwrap()).clone()
    }
}

impl ::std::fmt::Display for KeepAliveCommand {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for KeepAliveCommand {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  Sent by server on Register channel(s) to live SDKs
// @@protoc_insertion_point(message:protos.KVCommand)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct KVCommand {
    // message fields
    // @@protoc_insertion_point(field:protos.KVCommand.instructions)
    pub instructions: ::std::vec::Vec<super::sp_kv::KVInstruction>,
    ///  Create & Update specific setting that will cause the Create or Update to
    ///  work as an upsert.
    // @@protoc_insertion_point(field:protos.KVCommand.overwrite)
    pub overwrite: bool,
    // special fields
    // @@protoc_insertion_point(special_field:protos.KVCommand.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a KVCommand {
    fn default() -> &'a KVCommand {
        <KVCommand as ::protobuf::Message>::default_instance()
    }
}

impl KVCommand {
    pub fn new() -> KVCommand {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "instructions",
            |m: &KVCommand| { &m.instructions },
            |m: &mut KVCommand| { &mut m.instructions },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "overwrite",
            |m: &KVCommand| { &m.overwrite },
            |m: &mut KVCommand| { &mut m.overwrite },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<KVCommand>(
            "KVCommand",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for KVCommand {
    const NAME: &'static str = "KVCommand";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.instructions.push(is.read_message()?);
                },
                16 => {
                    self.overwrite = is.read_bool()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.instructions {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.overwrite != false {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.instructions {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        if self.overwrite != false {
            os.write_bool(2, self.overwrite)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> KVCommand {
        KVCommand::new()
    }

    fn clear(&mut self) {
        self.instructions.clear();
        self.overwrite = false;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static KVCommand {
        static instance: KVCommand = KVCommand {
            instructions: ::std::vec::Vec::new(),
            overwrite: false,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for KVCommand {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("KVCommand").unwrap()).clone()
    }
}

impl ::std::fmt::Display for KVCommand {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for KVCommand {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:protos.TailCommand)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct TailCommand {
    // message fields
    // @@protoc_insertion_point(field:protos.TailCommand.request)
    pub request: ::protobuf::MessageField<super::sp_common::TailRequest>,
    // special fields
    // @@protoc_insertion_point(special_field:protos.TailCommand.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a TailCommand {
    fn default() -> &'a TailCommand {
        <TailCommand as ::protobuf::Message>::default_instance()
    }
}

impl TailCommand {
    pub fn new() -> TailCommand {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::sp_common::TailRequest>(
            "request",
            |m: &TailCommand| { &m.request },
            |m: &mut TailCommand| { &mut m.request },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<TailCommand>(
            "TailCommand",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for TailCommand {
    const NAME: &'static str = "TailCommand";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.request)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.request.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.request.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> TailCommand {
        TailCommand::new()
    }

    fn clear(&mut self) {
        self.request.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static TailCommand {
        static instance: TailCommand = TailCommand {
            request: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for TailCommand {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("TailCommand").unwrap()).clone()
    }
}

impl ::std::fmt::Display for TailCommand {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TailCommand {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x10sp_command.proto\x12\x06protos\x1a\x0fsp_common.proto\x1a\x0bsp_kv\
    .proto\x1a\x11sp_pipeline.proto\"\x91\x02\n\x07Command\x12,\n\x08audienc\
    e\x18\x01\x20\x01(\x0b2\x10.protos.AudienceR\x08audience\x12B\n\rset_pip\
    elines\x18d\x20\x01(\x0b2\x1b.protos.SetPipelinesCommandH\0R\x0csetPipel\
    ines\x129\n\nkeep_alive\x18e\x20\x01(\x0b2\x18.protos.KeepAliveCommandH\
    \0R\tkeepAlive\x12#\n\x02kv\x18f\x20\x01(\x0b2\x11.protos.KVCommandH\0R\
    \x02kv\x12)\n\x04tail\x18g\x20\x01(\x0b2\x13.protos.TailCommandH\0R\x04t\
    ailB\t\n\x07command\"E\n\x13SetPipelinesCommand\x12.\n\tpipelines\x18\
    \x01\x20\x03(\x0b2\x10.protos.PipelineR\tpipelines\"\x12\n\x10KeepAliveC\
    ommand\"d\n\tKVCommand\x129\n\x0cinstructions\x18\x01\x20\x03(\x0b2\x15.\
    protos.KVInstructionR\x0cinstructions\x12\x1c\n\toverwrite\x18\x02\x20\
    \x01(\x08R\toverwrite\"<\n\x0bTailCommand\x12-\n\x07request\x18\x02\x20\
    \x01(\x0b2\x13.protos.TailRequestR\x07requestBHZ:github.com/streamdal/st\
    reamdal/libs/protos/build/go/protos\xea\x02\tStreamdalJ\xc3\x0e\n\x06\
    \x12\x04\0\0;\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\
    \x03\x02\0\x0f\n\t\n\x02\x03\0\x12\x03\x04\0\x19\n\t\n\x02\x03\x01\x12\
    \x03\x05\0\x15\n\t\n\x02\x03\x02\x12\x03\x06\0\x1b\n\x08\n\x01\x08\x12\
    \x03\x08\0Q\n\t\n\x02\x08\x0b\x12\x03\x08\0Q\n\x08\n\x01\x08\x12\x03\t\0\
    \"\n\t\n\x02\x08-\x12\x03\t\0\"\nN\n\x02\x04\0\x12\x04\x0c\0&\x01\x1aB\
    \x20Command\x20is\x20used\x20by\x20streamdal\x20server\x20for\x20sending\
    \x20commands\x20to\x20SDKs\n\n\n\n\x03\x04\0\x01\x12\x03\x0c\x08\x0f\n\
    \x93\x01\n\x04\x04\0\x02\0\x12\x03\x0f\x02\x1f\x1a\x85\x01\x20Who\x20is\
    \x20this\x20command\x20intended\x20for?\n\x20NOTE:\x20Some\x20commands\
    \x20(such\x20as\x20KeepAliveCommand,\x20KVCommand)\x20do\x20NOT\x20use\
    \x20audience\x20and\x20will\x20ignore\x20it\n\n\x0c\n\x05\x04\0\x02\0\
    \x06\x12\x03\x0f\x02\x11\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x0f\x12\x1a\
    \n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x0f\x1d\x1e\n\xed\x01\n\x04\x04\0\
    \x08\0\x12\x04\x11\x02%\x03\"\xde\x01\x20NOTE:\x20As\x20of\x2001.29.2024\
    ,\x20pause,\x20resume,\x20delete\x20and\x20update\x20pipeline\x20command\
    s\n\x20are\x20replaced\x20with\x20the\x20SetPipelinesCommand.\x20When\
    \x20a\x20pause/resume/etc.\x20are\n\x20called\x20on\x20server,\x20the\
    \x20server\x20will\x20emit\x20an\x20appropriate\x20SetPipelines\x20cmd.\
    \n\n\x0c\n\x05\x04\0\x08\0\x01\x12\x03\x11\x08\x0f\n\xc5\x01\n\x04\x04\0\
    \x02\x01\x12\x03\x19\x04,\x1a\xb7\x01\x20Emitted\x20by\x20server\x20when\
    \x20a\x20user\x20makes\x20a\x20pause,\x20resume,\x20delete\x20or\x20upda\
    te\n\x20pipeline\x20and\x20set\x20pipelines\x20external\x20grpc\x20API\
    \x20call.\n\x20NOTE:\x20This\x20was\x20introduced\x20during\x20ordered\
    \x20pipeline\x20updates.\n\n\x0c\n\x05\x04\0\x02\x01\x06\x12\x03\x19\x04\
    \x17\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x19\x18%\n\x0c\n\x05\x04\0\
    \x02\x01\x03\x12\x03\x19(+\nR\n\x04\x04\0\x02\x02\x12\x03\x1c\x04&\x1aE\
    \x20Server\x20sends\x20this\x20periodically\x20to\x20SDKs\x20to\x20keep\
    \x20the\x20connection\x20alive\n\n\x0c\n\x05\x04\0\x02\x02\x06\x12\x03\
    \x1c\x04\x14\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03\x1c\x15\x1f\n\x0c\n\
    \x05\x04\0\x02\x02\x03\x12\x03\x1c\"%\nd\n\x04\x04\0\x02\x03\x12\x03\x20\
    \x04\x17\x1aW\x20Server\x20will\x20emit\x20this\x20when\x20a\x20user\x20\
    makes\x20changes\x20to\x20the\x20KV\x20store\n\x20via\x20the\x20KV\x20HT\
    TP\x20API.\n\n\x0c\n\x05\x04\0\x02\x03\x06\x12\x03\x20\x04\r\n\x0c\n\x05\
    \x04\0\x02\x03\x01\x12\x03\x20\x0e\x10\n\x0c\n\x05\x04\0\x02\x03\x03\x12\
    \x03\x20\x13\x16\nn\n\x04\x04\0\x02\x04\x12\x03$\x04\x1b\x1aa\x20Emitted\
    \x20by\x20server\x20when\x20a\x20user\x20makes\x20a\x20Tail()\x20call\n\
    \x20Consumed\x20by\x20all\x20server\x20instances\x20and\x20by\x20SDKs\n\
    \n\x0c\n\x05\x04\0\x02\x04\x06\x12\x03$\x04\x0f\n\x0c\n\x05\x04\0\x02\
    \x04\x01\x12\x03$\x10\x14\n\x0c\n\x05\x04\0\x02\x04\x03\x12\x03$\x17\x1a\
    \n\n\n\x02\x04\x01\x12\x04(\0*\x01\n\n\n\x03\x04\x01\x01\x12\x03(\x08\
    \x1b\n\x0b\n\x04\x04\x01\x02\0\x12\x03)\x02)\n\x0c\n\x05\x04\x01\x02\0\
    \x04\x12\x03)\x02\n\n\x0c\n\x05\x04\x01\x02\0\x06\x12\x03)\x0b\x1a\n\x0c\
    \n\x05\x04\x01\x02\0\x01\x12\x03)\x1b$\n\x0c\n\x05\x04\x01\x02\0\x03\x12\
    \x03)'(\nD\n\x02\x04\x02\x12\x04,\0.\x01\"8\x20Nothing\x20needed\x20in\
    \x20here,\x20just\x20a\x20ping\x20from\x20server\x20to\x20SDK\n\n\n\n\
    \x03\x04\x02\x01\x12\x03,\x08\x18\n@\n\x02\x04\x03\x12\x041\07\x01\x1a4\
    \x20Sent\x20by\x20server\x20on\x20Register\x20channel(s)\x20to\x20live\
    \x20SDKs\n\n\n\n\x03\x04\x03\x01\x12\x031\x08\x11\n\x0b\n\x04\x04\x03\
    \x02\0\x12\x032\x021\n\x0c\n\x05\x04\x03\x02\0\x04\x12\x032\x02\n\n\x0c\
    \n\x05\x04\x03\x02\0\x06\x12\x032\x0b\x1f\n\x0c\n\x05\x04\x03\x02\0\x01\
    \x12\x032\x20,\n\x0c\n\x05\x04\x03\x02\0\x03\x12\x032/0\nk\n\x04\x04\x03\
    \x02\x01\x12\x036\x02\x15\x1a^\x20Create\x20&\x20Update\x20specific\x20s\
    etting\x20that\x20will\x20cause\x20the\x20Create\x20or\x20Update\x20to\n\
    \x20work\x20as\x20an\x20upsert.\n\n\x0c\n\x05\x04\x03\x02\x01\x05\x12\
    \x036\x02\x06\n\x0c\n\x05\x04\x03\x02\x01\x01\x12\x036\x07\x10\n\x0c\n\
    \x05\x04\x03\x02\x01\x03\x12\x036\x13\x14\n\n\n\x02\x04\x04\x12\x049\0;\
    \x01\n\n\n\x03\x04\x04\x01\x12\x039\x08\x13\n\x0b\n\x04\x04\x04\x02\0\
    \x12\x03:\x02\x1a\n\x0c\n\x05\x04\x04\x02\0\x06\x12\x03:\x02\r\n\x0c\n\
    \x05\x04\x04\x02\0\x01\x12\x03:\x0e\x15\n\x0c\n\x05\x04\x04\x02\0\x03\
    \x12\x03:\x18\x19b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(3);
            deps.push(super::sp_common::file_descriptor().clone());
            deps.push(super::sp_kv::file_descriptor().clone());
            deps.push(super::sp_pipeline::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(5);
            messages.push(Command::generated_message_descriptor_data());
            messages.push(SetPipelinesCommand::generated_message_descriptor_data());
            messages.push(KeepAliveCommand::generated_message_descriptor_data());
            messages.push(KVCommand::generated_message_descriptor_data());
            messages.push(TailCommand::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
