// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `shared/sp_shared.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

///  Main type representing a wasm module entry. Used by server for external.*Wasm()
///  methods; also used to ensure we only send the wasm module once per request
///  instead of duplicated in every pipeline where it is used. This prevents
///  over-sized payloads on SDK startup.
// @@protoc_insertion_point(message:protos.shared.WasmModule)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct WasmModule {
    // message fields
    ///  ID is uuid(sha256(_wasm_bytes)) and is used for referencing the Wasm module
    // @@protoc_insertion_point(field:protos.shared.WasmModule.id)
    pub id: ::std::string::String,
    ///  Contents of the Wasm module
    // @@protoc_insertion_point(field:protos.shared.WasmModule.bytes)
    pub bytes: ::std::vec::Vec<u8>,
    ///  Entry point function name
    // @@protoc_insertion_point(field:protos.shared.WasmModule.function)
    pub function: ::std::string::String,
    ///  Friendly name for the Wasm module
    // @@protoc_insertion_point(field:protos.shared.WasmModule.name)
    pub name: ::std::string::String,
    ///  Filename of the Wasm module (used only for bundled wasm)
    // @@protoc_insertion_point(field:protos.shared.WasmModule._filename)
    pub _filename: ::std::string::String,
    ///  Indicates whether this wasm entry is for bundled wasm or for wasm added via
    ///  CreateWasm(); ignored in CreateWasm() and UpdateWasm().
    // @@protoc_insertion_point(field:protos.shared.WasmModule._bundled)
    pub _bundled: bool,
    ///  Key = $OS_$ARCH_$WAZERO_VERSION, Value = precompiled bytes
    // @@protoc_insertion_point(field:protos.shared.WasmModule.precompiled)
    pub precompiled: ::std::collections::HashMap<::std::string::String, ::std::vec::Vec<u8>>,
    ///  Informative, debug fields
    // @@protoc_insertion_point(field:protos.shared.WasmModule.description)
    pub description: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:protos.shared.WasmModule.version)
    pub version: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:protos.shared.WasmModule.url)
    pub url: ::std::option::Option<::std::string::String>,
    ///  Set by server
    // @@protoc_insertion_point(field:protos.shared.WasmModule._created_at_unix_ts_ns_utc)
    pub _created_at_unix_ts_ns_utc: ::std::option::Option<i64>,
    ///  Set by server
    // @@protoc_insertion_point(field:protos.shared.WasmModule._updated_at_unix_ts_ns_utc)
    pub _updated_at_unix_ts_ns_utc: ::std::option::Option<i64>,
    ///  Used internally by server and k8s operator to determine who manages this resource
    // @@protoc_insertion_point(field:protos.shared.WasmModule._created_by)
    pub _created_by: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:protos.shared.WasmModule.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a WasmModule {
    fn default() -> &'a WasmModule {
        <WasmModule as ::protobuf::Message>::default_instance()
    }
}

impl WasmModule {
    pub fn new() -> WasmModule {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(13);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &WasmModule| { &m.id },
            |m: &mut WasmModule| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "bytes",
            |m: &WasmModule| { &m.bytes },
            |m: &mut WasmModule| { &mut m.bytes },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "function",
            |m: &WasmModule| { &m.function },
            |m: &mut WasmModule| { &mut m.function },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "name",
            |m: &WasmModule| { &m.name },
            |m: &mut WasmModule| { &mut m.name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "_filename",
            |m: &WasmModule| { &m._filename },
            |m: &mut WasmModule| { &mut m._filename },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "_bundled",
            |m: &WasmModule| { &m._bundled },
            |m: &mut WasmModule| { &mut m._bundled },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor::<_, _, _>(
            "precompiled",
            |m: &WasmModule| { &m.precompiled },
            |m: &mut WasmModule| { &mut m.precompiled },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "description",
            |m: &WasmModule| { &m.description },
            |m: &mut WasmModule| { &mut m.description },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "version",
            |m: &WasmModule| { &m.version },
            |m: &mut WasmModule| { &mut m.version },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "url",
            |m: &WasmModule| { &m.url },
            |m: &mut WasmModule| { &mut m.url },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "_created_at_unix_ts_ns_utc",
            |m: &WasmModule| { &m._created_at_unix_ts_ns_utc },
            |m: &mut WasmModule| { &mut m._created_at_unix_ts_ns_utc },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "_updated_at_unix_ts_ns_utc",
            |m: &WasmModule| { &m._updated_at_unix_ts_ns_utc },
            |m: &mut WasmModule| { &mut m._updated_at_unix_ts_ns_utc },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "_created_by",
            |m: &WasmModule| { &m._created_by },
            |m: &mut WasmModule| { &mut m._created_by },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<WasmModule>(
            "WasmModule",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for WasmModule {
    const NAME: &'static str = "WasmModule";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.id = is.read_string()?;
                },
                18 => {
                    self.bytes = is.read_bytes()?;
                },
                26 => {
                    self.function = is.read_string()?;
                },
                34 => {
                    self.name = is.read_string()?;
                },
                42 => {
                    self._filename = is.read_string()?;
                },
                48 => {
                    self._bundled = is.read_bool()?;
                },
                58 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            10 => key = is.read_string()?,
                            18 => value = is.read_bytes()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self.precompiled.insert(key, value);
                },
                810 => {
                    self.description = ::std::option::Option::Some(is.read_string()?);
                },
                818 => {
                    self.version = ::std::option::Option::Some(is.read_string()?);
                },
                826 => {
                    self.url = ::std::option::Option::Some(is.read_string()?);
                },
                8000 => {
                    self._created_at_unix_ts_ns_utc = ::std::option::Option::Some(is.read_int64()?);
                },
                8008 => {
                    self._updated_at_unix_ts_ns_utc = ::std::option::Option::Some(is.read_int64()?);
                },
                8018 => {
                    self._created_by = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        if !self.bytes.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.bytes);
        }
        if !self.function.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.function);
        }
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.name);
        }
        if !self._filename.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self._filename);
        }
        if self._bundled != false {
            my_size += 1 + 1;
        }
        for (k, v) in &self.precompiled {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::bytes_size(2, &v);
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        if let Some(v) = self.description.as_ref() {
            my_size += ::protobuf::rt::string_size(101, &v);
        }
        if let Some(v) = self.version.as_ref() {
            my_size += ::protobuf::rt::string_size(102, &v);
        }
        if let Some(v) = self.url.as_ref() {
            my_size += ::protobuf::rt::string_size(103, &v);
        }
        if let Some(v) = self._created_at_unix_ts_ns_utc {
            my_size += ::protobuf::rt::int64_size(1000, v);
        }
        if let Some(v) = self._updated_at_unix_ts_ns_utc {
            my_size += ::protobuf::rt::int64_size(1001, v);
        }
        if let Some(v) = self._created_by.as_ref() {
            my_size += ::protobuf::rt::string_size(1002, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        if !self.bytes.is_empty() {
            os.write_bytes(2, &self.bytes)?;
        }
        if !self.function.is_empty() {
            os.write_string(3, &self.function)?;
        }
        if !self.name.is_empty() {
            os.write_string(4, &self.name)?;
        }
        if !self._filename.is_empty() {
            os.write_string(5, &self._filename)?;
        }
        if self._bundled != false {
            os.write_bool(6, self._bundled)?;
        }
        for (k, v) in &self.precompiled {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::bytes_size(2, &v);
            os.write_raw_varint32(58)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_string(1, &k)?;
            os.write_bytes(2, &v)?;
        };
        if let Some(v) = self.description.as_ref() {
            os.write_string(101, v)?;
        }
        if let Some(v) = self.version.as_ref() {
            os.write_string(102, v)?;
        }
        if let Some(v) = self.url.as_ref() {
            os.write_string(103, v)?;
        }
        if let Some(v) = self._created_at_unix_ts_ns_utc {
            os.write_int64(1000, v)?;
        }
        if let Some(v) = self._updated_at_unix_ts_ns_utc {
            os.write_int64(1001, v)?;
        }
        if let Some(v) = self._created_by.as_ref() {
            os.write_string(1002, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> WasmModule {
        WasmModule::new()
    }

    fn clear(&mut self) {
        self.id.clear();
        self.bytes.clear();
        self.function.clear();
        self.name.clear();
        self._filename.clear();
        self._bundled = false;
        self.precompiled.clear();
        self.description = ::std::option::Option::None;
        self.version = ::std::option::Option::None;
        self.url = ::std::option::Option::None;
        self._created_at_unix_ts_ns_utc = ::std::option::Option::None;
        self._updated_at_unix_ts_ns_utc = ::std::option::Option::None;
        self._created_by = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static WasmModule {
        static instance: ::protobuf::rt::Lazy<WasmModule> = ::protobuf::rt::Lazy::new();
        instance.get(WasmModule::new)
    }
}

impl ::protobuf::MessageFull for WasmModule {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("WasmModule").unwrap()).clone()
    }
}

impl ::std::fmt::Display for WasmModule {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for WasmModule {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  KVAction is a shared type that is used for protos.KVCommand and protos.KVStep.
///  Note that only a subset of actions are used for protos.KVCommand (CREATE,
///  UPDATE, DELETE, DELETE_ALL) while protos.KVStep uses most of them.
///
///  protolint:disable:next ENUM_FIELD_NAMES_PREFIX
#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:protos.shared.KVAction)
pub enum KVAction {
    // @@protoc_insertion_point(enum_value:protos.shared.KVAction.KV_ACTION_UNSET)
    KV_ACTION_UNSET = 0,
    // @@protoc_insertion_point(enum_value:protos.shared.KVAction.KV_ACTION_GET)
    KV_ACTION_GET = 1,
    // @@protoc_insertion_point(enum_value:protos.shared.KVAction.KV_ACTION_CREATE)
    KV_ACTION_CREATE = 2,
    // @@protoc_insertion_point(enum_value:protos.shared.KVAction.KV_ACTION_UPDATE)
    KV_ACTION_UPDATE = 3,
    // @@protoc_insertion_point(enum_value:protos.shared.KVAction.KV_ACTION_EXISTS)
    KV_ACTION_EXISTS = 4,
    // @@protoc_insertion_point(enum_value:protos.shared.KVAction.KV_ACTION_DELETE)
    KV_ACTION_DELETE = 5,
    // @@protoc_insertion_point(enum_value:protos.shared.KVAction.KV_ACTION_DELETE_ALL)
    KV_ACTION_DELETE_ALL = 6,
}

impl ::protobuf::Enum for KVAction {
    const NAME: &'static str = "KVAction";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<KVAction> {
        match value {
            0 => ::std::option::Option::Some(KVAction::KV_ACTION_UNSET),
            1 => ::std::option::Option::Some(KVAction::KV_ACTION_GET),
            2 => ::std::option::Option::Some(KVAction::KV_ACTION_CREATE),
            3 => ::std::option::Option::Some(KVAction::KV_ACTION_UPDATE),
            4 => ::std::option::Option::Some(KVAction::KV_ACTION_EXISTS),
            5 => ::std::option::Option::Some(KVAction::KV_ACTION_DELETE),
            6 => ::std::option::Option::Some(KVAction::KV_ACTION_DELETE_ALL),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<KVAction> {
        match str {
            "KV_ACTION_UNSET" => ::std::option::Option::Some(KVAction::KV_ACTION_UNSET),
            "KV_ACTION_GET" => ::std::option::Option::Some(KVAction::KV_ACTION_GET),
            "KV_ACTION_CREATE" => ::std::option::Option::Some(KVAction::KV_ACTION_CREATE),
            "KV_ACTION_UPDATE" => ::std::option::Option::Some(KVAction::KV_ACTION_UPDATE),
            "KV_ACTION_EXISTS" => ::std::option::Option::Some(KVAction::KV_ACTION_EXISTS),
            "KV_ACTION_DELETE" => ::std::option::Option::Some(KVAction::KV_ACTION_DELETE),
            "KV_ACTION_DELETE_ALL" => ::std::option::Option::Some(KVAction::KV_ACTION_DELETE_ALL),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [KVAction] = &[
        KVAction::KV_ACTION_UNSET,
        KVAction::KV_ACTION_GET,
        KVAction::KV_ACTION_CREATE,
        KVAction::KV_ACTION_UPDATE,
        KVAction::KV_ACTION_EXISTS,
        KVAction::KV_ACTION_DELETE,
        KVAction::KV_ACTION_DELETE_ALL,
    ];
}

impl ::protobuf::EnumFull for KVAction {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("KVAction").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for KVAction {
    fn default() -> Self {
        KVAction::KV_ACTION_UNSET
    }
}

impl KVAction {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<KVAction>("KVAction")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x16shared/sp_shared.proto\x12\rprotos.shared\"\x9d\x05\n\nWasmModule\
    \x12\x0e\n\x02id\x18\x01\x20\x01(\tR\x02id\x12\x14\n\x05bytes\x18\x02\
    \x20\x01(\x0cR\x05bytes\x12\x1a\n\x08function\x18\x03\x20\x01(\tR\x08fun\
    ction\x12\x12\n\x04name\x18\x04\x20\x01(\tR\x04name\x12\x1b\n\t_filename\
    \x18\x05\x20\x01(\tR\x08Filename\x12\x19\n\x08_bundled\x18\x06\x20\x01(\
    \x08R\x07Bundled\x12L\n\x0bprecompiled\x18\x07\x20\x03(\x0b2*.protos.sha\
    red.WasmModule.PrecompiledEntryR\x0bprecompiled\x12%\n\x0bdescription\
    \x18e\x20\x01(\tH\0R\x0bdescription\x88\x01\x01\x12\x1d\n\x07version\x18\
    f\x20\x01(\tH\x01R\x07version\x88\x01\x01\x12\x15\n\x03url\x18g\x20\x01(\
    \tH\x02R\x03url\x88\x01\x01\x12>\n\x1a_created_at_unix_ts_ns_utc\x18\xe8\
    \x07\x20\x01(\x03H\x03R\x14CreatedAtUnixTsNsUtc\x88\x01\x01\x12>\n\x1a_u\
    pdated_at_unix_ts_ns_utc\x18\xe9\x07\x20\x01(\x03H\x04R\x14UpdatedAtUnix\
    TsNsUtc\x88\x01\x01\x12$\n\x0b_created_by\x18\xea\x07\x20\x01(\tH\x05R\t\
    CreatedBy\x88\x01\x01\x1a>\n\x10PrecompiledEntry\x12\x10\n\x03key\x18\
    \x01\x20\x01(\tR\x03key\x12\x14\n\x05value\x18\x02\x20\x01(\x0cR\x05valu\
    e:\x028\x01B\x0e\n\x0c_descriptionB\n\n\x08_versionB\x06\n\x04_urlB\x1d\
    \n\x1bX_created_at_unix_ts_ns_utcB\x1d\n\x1bX_updated_at_unix_ts_ns_utcB\
    \x0e\n\x0cX_created_by*\xa4\x01\n\x08KVAction\x12\x13\n\x0fKV_ACTION_UNS\
    ET\x10\0\x12\x11\n\rKV_ACTION_GET\x10\x01\x12\x14\n\x10KV_ACTION_CREATE\
    \x10\x02\x12\x14\n\x10KV_ACTION_UPDATE\x10\x03\x12\x14\n\x10KV_ACTION_EX\
    ISTS\x10\x04\x12\x14\n\x10KV_ACTION_DELETE\x10\x05\x12\x18\n\x14KV_ACTIO\
    N_DELETE_ALL\x10\x06BWZAgithub.com/streamdal/streamdal/libs/protos/build\
    /go/protos/shared\xea\x02\x11Streamdal::ProtosJ\xff\x14\n\x06\x12\x04\
    \x01\0A\x01\nT\n\x01\x0c\x12\x03\x01\0\x12\x1aJ\x20This\x20has\x20to\x20\
    be\x20a\x20separate\x20pkg\x20to\x20avoid\x20circular\x20import\x20probl\
    ems\x20with\x20Go.\n\n\x08\n\x01\x02\x12\x03\x03\0\x16\n\x08\n\x01\x08\
    \x12\x03\x05\0X\n\t\n\x02\x08\x0b\x12\x03\x05\0X\n\x08\n\x01\x08\x12\x03\
    \x06\0*\n\t\n\x02\x08-\x12\x03\x06\0*\n\x9d\x02\n\x02\x05\0\x12\x04\r\0\
    \x15\x01\x1a\x90\x02\x20KVAction\x20is\x20a\x20shared\x20type\x20that\
    \x20is\x20used\x20for\x20protos.KVCommand\x20and\x20protos.KVStep.\n\x20\
    Note\x20that\x20only\x20a\x20subset\x20of\x20actions\x20are\x20used\x20f\
    or\x20protos.KVCommand\x20(CREATE,\n\x20UPDATE,\x20DELETE,\x20DELETE_ALL\
    )\x20while\x20protos.KVStep\x20uses\x20most\x20of\x20them.\n\n\x20protol\
    int:disable:next\x20ENUM_FIELD_NAMES_PREFIX\n\n\n\n\x03\x05\0\x01\x12\
    \x03\r\x05\r\n\x0b\n\x04\x05\0\x02\0\x12\x03\x0e\x02\x16\n\x0c\n\x05\x05\
    \0\x02\0\x01\x12\x03\x0e\x02\x11\n\x0c\n\x05\x05\0\x02\0\x02\x12\x03\x0e\
    \x14\x15\n\x0b\n\x04\x05\0\x02\x01\x12\x03\x0f\x02\x14\n\x0c\n\x05\x05\0\
    \x02\x01\x01\x12\x03\x0f\x02\x0f\n\x0c\n\x05\x05\0\x02\x01\x02\x12\x03\
    \x0f\x12\x13\n\x0b\n\x04\x05\0\x02\x02\x12\x03\x10\x02\x17\n\x0c\n\x05\
    \x05\0\x02\x02\x01\x12\x03\x10\x02\x12\n\x0c\n\x05\x05\0\x02\x02\x02\x12\
    \x03\x10\x15\x16\n\x0b\n\x04\x05\0\x02\x03\x12\x03\x11\x02\x17\n\x0c\n\
    \x05\x05\0\x02\x03\x01\x12\x03\x11\x02\x12\n\x0c\n\x05\x05\0\x02\x03\x02\
    \x12\x03\x11\x15\x16\n\x0b\n\x04\x05\0\x02\x04\x12\x03\x12\x02\x17\n\x0c\
    \n\x05\x05\0\x02\x04\x01\x12\x03\x12\x02\x12\n\x0c\n\x05\x05\0\x02\x04\
    \x02\x12\x03\x12\x15\x16\n\x0b\n\x04\x05\0\x02\x05\x12\x03\x13\x02\x17\n\
    \x0c\n\x05\x05\0\x02\x05\x01\x12\x03\x13\x02\x12\n\x0c\n\x05\x05\0\x02\
    \x05\x02\x12\x03\x13\x15\x16\n\x0b\n\x04\x05\0\x02\x06\x12\x03\x14\x02\
    \x1b\n\x0c\n\x05\x05\0\x02\x06\x01\x12\x03\x14\x02\x16\n\x0c\n\x05\x05\0\
    \x02\x06\x02\x12\x03\x14\x19\x1a\n\x98\x02\n\x02\x04\0\x12\x04\x1b\0A\
    \x01\x1a\x8b\x02\x20Main\x20type\x20representing\x20a\x20wasm\x20module\
    \x20entry.\x20Used\x20by\x20server\x20for\x20external.*Wasm()\n\x20metho\
    ds;\x20also\x20used\x20to\x20ensure\x20we\x20only\x20send\x20the\x20wasm\
    \x20module\x20once\x20per\x20request\n\x20instead\x20of\x20duplicated\
    \x20in\x20every\x20pipeline\x20where\x20it\x20is\x20used.\x20This\x20pre\
    vents\n\x20over-sized\x20payloads\x20on\x20SDK\x20startup.\n\n\n\n\x03\
    \x04\0\x01\x12\x03\x1b\x08\x12\nZ\n\x04\x04\0\x02\0\x12\x03\x1d\x02\x10\
    \x1aM\x20ID\x20is\x20uuid(sha256(_wasm_bytes))\x20and\x20is\x20used\x20f\
    or\x20referencing\x20the\x20Wasm\x20module\n\n\x0c\n\x05\x04\0\x02\0\x05\
    \x12\x03\x1d\x02\x08\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x1d\t\x0b\n\x0c\
    \n\x05\x04\0\x02\0\x03\x12\x03\x1d\x0e\x0f\n*\n\x04\x04\0\x02\x01\x12\
    \x03\x20\x02\x12\x1a\x1d\x20Contents\x20of\x20the\x20Wasm\x20module\n\n\
    \x0c\n\x05\x04\0\x02\x01\x05\x12\x03\x20\x02\x07\n\x0c\n\x05\x04\0\x02\
    \x01\x01\x12\x03\x20\x08\r\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x20\x10\
    \x11\n(\n\x04\x04\0\x02\x02\x12\x03#\x02\x16\x1a\x1b\x20Entry\x20point\
    \x20function\x20name\n\n\x0c\n\x05\x04\0\x02\x02\x05\x12\x03#\x02\x08\n\
    \x0c\n\x05\x04\0\x02\x02\x01\x12\x03#\t\x11\n\x0c\n\x05\x04\0\x02\x02\
    \x03\x12\x03#\x14\x15\n0\n\x04\x04\0\x02\x03\x12\x03&\x02\x12\x1a#\x20Fr\
    iendly\x20name\x20for\x20the\x20Wasm\x20module\n\n\x0c\n\x05\x04\0\x02\
    \x03\x05\x12\x03&\x02\x08\n\x0c\n\x05\x04\0\x02\x03\x01\x12\x03&\t\r\n\
    \x0c\n\x05\x04\0\x02\x03\x03\x12\x03&\x10\x11\n~\n\x04\x04\0\x02\x04\x12\
    \x03)\x02\x17\x1a:\x20Filename\x20of\x20the\x20Wasm\x20module\x20(used\
    \x20only\x20for\x20bundled\x20wasm)\n\"5\x20protolint:disable:this\x20FI\
    ELD_NAMES_LOWER_SNAKE_CASE\n\n\x0c\n\x05\x04\0\x02\x04\x05\x12\x03)\x02\
    \x08\n\x0c\n\x05\x04\0\x02\x04\x01\x12\x03)\t\x12\n\x0c\n\x05\x04\0\x02\
    \x04\x03\x12\x03)\x15\x16\n\xcb\x01\n\x04\x04\0\x02\x05\x12\x03-\x02\x14\
    \x1a\x86\x01\x20Indicates\x20whether\x20this\x20wasm\x20entry\x20is\x20f\
    or\x20bundled\x20wasm\x20or\x20for\x20wasm\x20added\x20via\n\x20CreateWa\
    sm();\x20ignored\x20in\x20CreateWasm()\x20and\x20UpdateWasm().\n\"5\x20p\
    rotolint:disable:this\x20FIELD_NAMES_LOWER_SNAKE_CASE\n\n\x0c\n\x05\x04\
    \0\x02\x05\x05\x12\x03-\x02\x06\n\x0c\n\x05\x04\0\x02\x05\x01\x12\x03-\
    \x07\x0f\n\x0c\n\x05\x04\0\x02\x05\x03\x12\x03-\x12\x13\nI\n\x04\x04\0\
    \x02\x06\x12\x030\x02$\x1a<\x20Key\x20=\x20$OS_$ARCH_$WAZERO_VERSION,\
    \x20Value\x20=\x20precompiled\x20bytes\n\n\x0c\n\x05\x04\0\x02\x06\x06\
    \x12\x030\x02\x13\n\x0c\n\x05\x04\0\x02\x06\x01\x12\x030\x14\x1f\n\x0c\n\
    \x05\x04\0\x02\x06\x03\x12\x030\"#\n(\n\x04\x04\0\x02\x07\x12\x033\x02$\
    \x1a\x1b\x20Informative,\x20debug\x20fields\n\n\x0c\n\x05\x04\0\x02\x07\
    \x04\x12\x033\x02\n\n\x0c\n\x05\x04\0\x02\x07\x05\x12\x033\x0b\x11\n\x0c\
    \n\x05\x04\0\x02\x07\x01\x12\x033\x12\x1d\n\x0c\n\x05\x04\0\x02\x07\x03\
    \x12\x033\x20#\n\x0b\n\x04\x04\0\x02\x08\x12\x034\x02\x20\n\x0c\n\x05\
    \x04\0\x02\x08\x04\x12\x034\x02\n\n\x0c\n\x05\x04\0\x02\x08\x05\x12\x034\
    \x0b\x11\n\x0c\n\x05\x04\0\x02\x08\x01\x12\x034\x12\x19\n\x0c\n\x05\x04\
    \0\x02\x08\x03\x12\x034\x1c\x1f\n\x0b\n\x04\x04\0\x02\t\x12\x035\x02\x1c\
    \n\x0c\n\x05\x04\0\x02\t\x04\x12\x035\x02\n\n\x0c\n\x05\x04\0\x02\t\x05\
    \x12\x035\x0b\x11\n\x0c\n\x05\x04\0\x02\t\x01\x12\x035\x12\x15\n\x0c\n\
    \x05\x04\0\x02\t\x03\x12\x035\x18\x1b\nS\n\x04\x04\0\x02\n\x12\x03:\x023\
    \x1a\x0f\x20Set\x20by\x20server\n\"5\x20protolint:disable:this\x20FIELD_\
    NAMES_LOWER_SNAKE_CASE\n\n\x0c\n\x05\x04\0\x02\n\x04\x12\x03:\x02\n\n\
    \x0c\n\x05\x04\0\x02\n\x05\x12\x03:\x0b\x10\n\x0c\n\x05\x04\0\x02\n\x01\
    \x12\x03:\x11+\n\x0c\n\x05\x04\0\x02\n\x03\x12\x03:.2\nS\n\x04\x04\0\x02\
    \x0b\x12\x03=\x023\x1a\x0f\x20Set\x20by\x20server\n\"5\x20protolint:disa\
    ble:this\x20FIELD_NAMES_LOWER_SNAKE_CASE\n\n\x0c\n\x05\x04\0\x02\x0b\x04\
    \x12\x03=\x02\n\n\x0c\n\x05\x04\0\x02\x0b\x05\x12\x03=\x0b\x10\n\x0c\n\
    \x05\x04\0\x02\x0b\x01\x12\x03=\x11+\n\x0c\n\x05\x04\0\x02\x0b\x03\x12\
    \x03=.2\n\x97\x01\n\x04\x04\0\x02\x0c\x12\x03@\x02%\x1aS\x20Used\x20inte\
    rnally\x20by\x20server\x20and\x20k8s\x20operator\x20to\x20determine\x20w\
    ho\x20manages\x20this\x20resource\n\"5\x20protolint:disable:this\x20FIEL\
    D_NAMES_LOWER_SNAKE_CASE\n\n\x0c\n\x05\x04\0\x02\x0c\x04\x12\x03@\x02\n\
    \n\x0c\n\x05\x04\0\x02\x0c\x05\x12\x03@\x0b\x11\n\x0c\n\x05\x04\0\x02\
    \x0c\x01\x12\x03@\x12\x1d\n\x0c\n\x05\x04\0\x02\x0c\x03\x12\x03@\x20$b\
    \x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(WasmModule::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(KVAction::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
