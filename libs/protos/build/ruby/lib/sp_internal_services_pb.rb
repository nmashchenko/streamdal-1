# Generated by the protocol buffer compiler.  DO NOT EDIT!
# Source: sp_internal.proto for package 'Streamdal.Protos'

require 'grpc'
require 'sp_internal_pb'

module Streamdal
  module Protos
    module Internal
      class Service

        include ::GRPC::GenericService

        self.marshal_class_method = :encode
        self.unmarshal_class_method = :decode
        self.service_name = 'protos.Internal'

        # Initial method that an SDK should call to register itself with the server.
        # The server will use this stream to send commands to the SDK via the
        # `CommandResponse` message. Clients should continuously listen for
        # CommandResponse messages and re-establish registration if the stream gets
        # disconnected.
        rpc :Register, ::Streamdal::Protos::RegisterRequest, stream(::Streamdal::Protos::Command)
        # Declare a new audience that the SDK is able to accept commands for.
        # An SDK would use this method when a new audience is declared by the user
        # via `.Process()`.
        rpc :NewAudience, ::Streamdal::Protos::NewAudienceRequest, ::Streamdal::Protos::StandardResponse
        # SDK is responsible for sending heartbeats to the server to let the server
        # know about active consumers and producers.
        rpc :Heartbeat, ::Streamdal::Protos::HeartbeatRequest, ::Streamdal::Protos::StandardResponse
        # Use this method when Notify condition has been triggered; the server will
        # decide on what to do about the notification.
        rpc :Notify, ::Streamdal::Protos::NotifyRequest, ::Streamdal::Protos::StandardResponse
        # Send periodic metrics to the server
        rpc :Metrics, ::Streamdal::Protos::MetricsRequest, ::Streamdal::Protos::StandardResponse
        # Used to pull all pipeline configs for the service name in the SDK's constructor
        # This is needed because Register() is async
        rpc :GetSetPipelinesCommandsByService, ::Streamdal::Protos::GetSetPipelinesCommandsByServiceRequest, ::Streamdal::Protos::GetSetPipelinesCommandsByServiceResponse
        rpc :SendTail, stream(::Streamdal::Protos::TailResponse), ::Streamdal::Protos::StandardResponse
        # Used by SDK to send a new schema to the server
        rpc :SendSchema, ::Streamdal::Protos::SendSchemaRequest, ::Streamdal::Protos::StandardResponse
      end

      Stub = Service.rpc_stub_class
    end
  end
end
