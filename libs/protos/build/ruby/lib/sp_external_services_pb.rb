# Generated by the protocol buffer compiler.  DO NOT EDIT!
# Source: sp_external.proto for package 'Streamdal.Protos'

require 'grpc'
require 'sp_external_pb'

module Streamdal
  module Protos
    module External
      class Service

        include ::GRPC::GenericService

        self.marshal_class_method = :encode
        self.unmarshal_class_method = :decode
        self.service_name = 'protos.External'

        # Returns all data needed for UI; called on initial console load
        rpc :GetAll, ::Streamdal::Protos::GetAllRequest, ::Streamdal::Protos::GetAllResponse
        # Used by console to stream updates to UI; called after initial GetAll()
        rpc :GetAllStream, ::Streamdal::Protos::GetAllRequest, stream(::Streamdal::Protos::GetAllResponse)
        # Returns pipelines (_wasm_bytes field is stripped)
        rpc :GetPipelines, ::Streamdal::Protos::GetPipelinesRequest, ::Streamdal::Protos::GetPipelinesResponse
        # Returns a single pipeline (_wasm_bytes field is stripped)
        rpc :GetPipeline, ::Streamdal::Protos::GetPipelineRequest, ::Streamdal::Protos::GetPipelineResponse
        # Create a new pipeline; id must be left empty on create
        rpc :CreatePipeline, ::Streamdal::Protos::CreatePipelineRequest, ::Streamdal::Protos::CreatePipelineResponse
        # Update an existing pipeline; id must be set
        rpc :UpdatePipeline, ::Streamdal::Protos::UpdatePipelineRequest, ::Streamdal::Protos::StandardResponse
        # Delete a pipeline
        rpc :DeletePipeline, ::Streamdal::Protos::DeletePipelineRequest, ::Streamdal::Protos::StandardResponse
        rpc :SetPipelines, ::Streamdal::Protos::SetPipelinesRequest, ::Streamdal::Protos::StandardResponse
        # Pause a pipeline; noop if pipeline is already paused
        rpc :PausePipeline, ::Streamdal::Protos::PausePipelineRequest, ::Streamdal::Protos::StandardResponse
        # Resume a pipeline; noop if pipeline is not paused
        rpc :ResumePipeline, ::Streamdal::Protos::ResumePipelineRequest, ::Streamdal::Protos::StandardResponse
        # Create a new notification config
        rpc :CreateNotification, ::Streamdal::Protos::CreateNotificationRequest, ::Streamdal::Protos::CreateNotificationResponse
        # Update an existing notification config
        rpc :UpdateNotification, ::Streamdal::Protos::UpdateNotificationRequest, ::Streamdal::Protos::StandardResponse
        # Delete a notification config
        rpc :DeleteNotification, ::Streamdal::Protos::DeleteNotificationRequest, ::Streamdal::Protos::StandardResponse
        # Returns all notification configs
        rpc :GetNotifications, ::Streamdal::Protos::GetNotificationsRequest, ::Streamdal::Protos::GetNotificationsResponse
        # Returns a single notification config
        rpc :GetNotification, ::Streamdal::Protos::GetNotificationRequest, ::Streamdal::Protos::GetNotificationResponse
        # Attach a notification config to a pipeline
        rpc :AttachNotification, ::Streamdal::Protos::AttachNotificationRequest, ::Streamdal::Protos::StandardResponse
        # Detach a notification config from a pipeline
        rpc :DetachNotification, ::Streamdal::Protos::DetachNotificationRequest, ::Streamdal::Protos::StandardResponse
        # Create an audience. Used for terraform purposes
        rpc :CreateAudience, ::Streamdal::Protos::CreateAudienceRequest, ::Streamdal::Protos::StandardResponse
        # Delete an audience
        rpc :DeleteAudience, ::Streamdal::Protos::DeleteAudienceRequest, ::Streamdal::Protos::StandardResponse
        # Delete a service and all associated audiences
        rpc :DeleteService, ::Streamdal::Protos::DeleteServiceRequest, ::Streamdal::Protos::StandardResponse
        # Returns all metric counters
        rpc :GetMetrics, ::Streamdal::Protos::GetMetricsRequest, stream(::Streamdal::Protos::GetMetricsResponse)
        rpc :Tail, ::Streamdal::Protos::TailRequest, stream(::Streamdal::Protos::TailResponse)
        rpc :PauseTail, ::Streamdal::Protos::PauseTailRequest, ::Streamdal::Protos::StandardResponse
        rpc :ResumeTail, ::Streamdal::Protos::ResumeTailRequest, ::Streamdal::Protos::StandardResponse
        rpc :GetAudienceRates, ::Streamdal::Protos::GetAudienceRatesRequest, stream(::Streamdal::Protos::GetAudienceRatesResponse)
        rpc :GetSchema, ::Streamdal::Protos::GetSchemaRequest, ::Streamdal::Protos::GetSchemaResponse
        rpc :AppRegistrationStatus, ::Streamdal::Protos::AppRegistrationStatusRequest, ::Streamdal::Protos::AppRegistrationStatusResponse
        rpc :AppRegister, ::Streamdal::Protos::AppRegistrationRequest, ::Streamdal::Protos::StandardResponse
        rpc :AppVerifyRegistration, ::Streamdal::Protos::AppVerifyRegistrationRequest, ::Streamdal::Protos::StandardResponse
        rpc :AppRegisterReject, ::Streamdal::Protos::AppRegisterRejectRequest, ::Streamdal::Protos::StandardResponse
        # Test method
        rpc :Test, ::Streamdal::Protos::TestRequest, ::Streamdal::Protos::TestResponse
      end

      Stub = Service.rpc_stub_class
    end
  end
end
