// @generated by protobuf-ts 2.9.0 with parameter long_type_string
// @generated from protobuf file "sp_notify.proto" (package "protos", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message protos.NotificationConfig
 */
export interface NotificationConfig {
    /**
     * @generated from protobuf field: optional string id = 1;
     */
    id?: string;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: protos.NotificationType type = 3;
     */
    type: NotificationType;
    /**
     * @generated from protobuf oneof: config
     */
    config: {
        oneofKind: "slack";
        /**
         * @generated from protobuf field: protos.NotificationSlack slack = 1000;
         */
        slack: NotificationSlack;
    } | {
        oneofKind: "email";
        /**
         * @generated from protobuf field: protos.NotificationEmail email = 1001;
         */
        email: NotificationEmail;
    } | {
        oneofKind: "pagerduty";
        /**
         * @generated from protobuf field: protos.NotificationPagerDuty pagerduty = 1002;
         */
        pagerduty: NotificationPagerDuty;
    } | {
        oneofKind: undefined;
    };
    /**
     * Used internally by server and k8s operator to determine who manages this resource
     *
     * @generated from protobuf field: optional string _created_by = 10000;
     */
    CreatedBy?: string; // protolint:disable:this FIELD_NAMES_LOWER_SNAKE_CASE
}
/**
 * @generated from protobuf message protos.NotificationSlack
 */
export interface NotificationSlack {
    /**
     * @generated from protobuf field: string bot_token = 1;
     */
    botToken: string;
    /**
     * @generated from protobuf field: string channel = 2;
     */
    channel: string;
}
/**
 * @generated from protobuf message protos.NotificationEmail
 */
export interface NotificationEmail {
    /**
     * @generated from protobuf field: protos.NotificationEmail.Type type = 1;
     */
    type: NotificationEmail_Type;
    /**
     * @generated from protobuf field: repeated string recipients = 2;
     */
    recipients: string[];
    /**
     * @generated from protobuf field: string from_address = 3;
     */
    fromAddress: string;
    /**
     * @generated from protobuf oneof: config
     */
    config: {
        oneofKind: "smtp";
        /**
         * @generated from protobuf field: protos.NotificationEmailSMTP smtp = 1000;
         */
        smtp: NotificationEmailSMTP;
    } | {
        oneofKind: "ses";
        /**
         * @generated from protobuf field: protos.NotificationEmailSES ses = 1001;
         */
        ses: NotificationEmailSES;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf enum protos.NotificationEmail.Type
 */
export enum NotificationEmail_Type {
    /**
     * @generated from protobuf enum value: TYPE_UNSET = 0;
     */
    UNSET = 0,
    /**
     * @generated from protobuf enum value: TYPE_SMTP = 1;
     */
    SMTP = 1,
    /**
     * @generated from protobuf enum value: TYPE_SES = 2;
     */
    SES = 2
}
/**
 * @generated from protobuf message protos.NotificationEmailSMTP
 */
export interface NotificationEmailSMTP {
    /**
     * @generated from protobuf field: string host = 1;
     */
    host: string;
    /**
     * @generated from protobuf field: int32 port = 2;
     */
    port: number;
    /**
     * @generated from protobuf field: string user = 3;
     */
    user: string;
    /**
     * @generated from protobuf field: string password = 4;
     */
    password: string;
    /**
     * @generated from protobuf field: bool use_tls = 5;
     */
    useTls: boolean;
}
/**
 * @generated from protobuf message protos.NotificationEmailSES
 */
export interface NotificationEmailSES {
    /**
     * @generated from protobuf field: string ses_region = 1;
     */
    sesRegion: string;
    /**
     * @generated from protobuf field: string ses_access_key_id = 2;
     */
    sesAccessKeyId: string;
    /**
     * @generated from protobuf field: string ses_secret_access_key = 3;
     */
    sesSecretAccessKey: string;
}
/**
 * @generated from protobuf message protos.NotificationPagerDuty
 */
export interface NotificationPagerDuty {
    /**
     * Auth token
     *
     * @generated from protobuf field: string token = 1;
     */
    token: string;
    /**
     * Must be a valid email for a PagerDuty user
     *
     * @generated from protobuf field: string email = 2;
     */
    email: string;
    /**
     * Must be a valid PagerDuty service
     *
     * @generated from protobuf field: string service_id = 3;
     */
    serviceId: string;
    /**
     * @generated from protobuf field: protos.NotificationPagerDuty.Urgency urgency = 4;
     */
    urgency: NotificationPagerDuty_Urgency;
}
/**
 * @generated from protobuf enum protos.NotificationPagerDuty.Urgency
 */
export enum NotificationPagerDuty_Urgency {
    /**
     * @generated from protobuf enum value: URGENCY_UNSET = 0;
     */
    UNSET = 0,
    /**
     * @generated from protobuf enum value: URGENCY_LOW = 1;
     */
    LOW = 1,
    /**
     * @generated from protobuf enum value: URGENCY_HIGH = 2;
     */
    HIGH = 2
}
/**
 * @generated from protobuf enum protos.NotificationType
 */
export enum NotificationType {
    /**
     * @generated from protobuf enum value: NOTIFICATION_TYPE_UNSET = 0;
     */
    UNSET = 0,
    /**
     * @generated from protobuf enum value: NOTIFICATION_TYPE_SLACK = 1;
     */
    SLACK = 1,
    /**
     * @generated from protobuf enum value: NOTIFICATION_TYPE_EMAIL = 2;
     */
    EMAIL = 2,
    /**
     * @generated from protobuf enum value: NOTIFICATION_TYPE_PAGERDUTY = 3;
     */
    PAGERDUTY = 3
}
// @generated message type with reflection information, may provide speed optimized methods
class NotificationConfig$Type extends MessageType<NotificationConfig> {
    constructor() {
        super("protos.NotificationConfig", [
            { no: 1, name: "id", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "type", kind: "enum", T: () => ["protos.NotificationType", NotificationType, "NOTIFICATION_TYPE_"] },
            { no: 1000, name: "slack", kind: "message", oneof: "config", T: () => NotificationSlack },
            { no: 1001, name: "email", kind: "message", oneof: "config", T: () => NotificationEmail },
            { no: 1002, name: "pagerduty", kind: "message", oneof: "config", T: () => NotificationPagerDuty },
            { no: 10000, name: "_created_by", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<NotificationConfig>): NotificationConfig {
        const message = { name: "", type: 0, config: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<NotificationConfig>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: NotificationConfig): NotificationConfig {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* protos.NotificationType type */ 3:
                    message.type = reader.int32();
                    break;
                case /* protos.NotificationSlack slack */ 1000:
                    message.config = {
                        oneofKind: "slack",
                        slack: NotificationSlack.internalBinaryRead(reader, reader.uint32(), options, (message.config as any).slack)
                    };
                    break;
                case /* protos.NotificationEmail email */ 1001:
                    message.config = {
                        oneofKind: "email",
                        email: NotificationEmail.internalBinaryRead(reader, reader.uint32(), options, (message.config as any).email)
                    };
                    break;
                case /* protos.NotificationPagerDuty pagerduty */ 1002:
                    message.config = {
                        oneofKind: "pagerduty",
                        pagerduty: NotificationPagerDuty.internalBinaryRead(reader, reader.uint32(), options, (message.config as any).pagerduty)
                    };
                    break;
                case /* optional string _created_by */ 10000:
                    message.CreatedBy = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: NotificationConfig, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string id = 1; */
        if (message.id !== undefined)
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* protos.NotificationType type = 3; */
        if (message.type !== 0)
            writer.tag(3, WireType.Varint).int32(message.type);
        /* protos.NotificationSlack slack = 1000; */
        if (message.config.oneofKind === "slack")
            NotificationSlack.internalBinaryWrite(message.config.slack, writer.tag(1000, WireType.LengthDelimited).fork(), options).join();
        /* protos.NotificationEmail email = 1001; */
        if (message.config.oneofKind === "email")
            NotificationEmail.internalBinaryWrite(message.config.email, writer.tag(1001, WireType.LengthDelimited).fork(), options).join();
        /* protos.NotificationPagerDuty pagerduty = 1002; */
        if (message.config.oneofKind === "pagerduty")
            NotificationPagerDuty.internalBinaryWrite(message.config.pagerduty, writer.tag(1002, WireType.LengthDelimited).fork(), options).join();
        /* optional string _created_by = 10000; */
        if (message.CreatedBy !== undefined)
            writer.tag(10000, WireType.LengthDelimited).string(message.CreatedBy);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message protos.NotificationConfig
 */
export const NotificationConfig = new NotificationConfig$Type();
// @generated message type with reflection information, may provide speed optimized methods
class NotificationSlack$Type extends MessageType<NotificationSlack> {
    constructor() {
        super("protos.NotificationSlack", [
            { no: 1, name: "bot_token", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "channel", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<NotificationSlack>): NotificationSlack {
        const message = { botToken: "", channel: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<NotificationSlack>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: NotificationSlack): NotificationSlack {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string bot_token */ 1:
                    message.botToken = reader.string();
                    break;
                case /* string channel */ 2:
                    message.channel = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: NotificationSlack, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string bot_token = 1; */
        if (message.botToken !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.botToken);
        /* string channel = 2; */
        if (message.channel !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.channel);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message protos.NotificationSlack
 */
export const NotificationSlack = new NotificationSlack$Type();
// @generated message type with reflection information, may provide speed optimized methods
class NotificationEmail$Type extends MessageType<NotificationEmail> {
    constructor() {
        super("protos.NotificationEmail", [
            { no: 1, name: "type", kind: "enum", T: () => ["protos.NotificationEmail.Type", NotificationEmail_Type, "TYPE_"] },
            { no: 2, name: "recipients", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "from_address", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 1000, name: "smtp", kind: "message", oneof: "config", T: () => NotificationEmailSMTP },
            { no: 1001, name: "ses", kind: "message", oneof: "config", T: () => NotificationEmailSES }
        ]);
    }
    create(value?: PartialMessage<NotificationEmail>): NotificationEmail {
        const message = { type: 0, recipients: [], fromAddress: "", config: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<NotificationEmail>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: NotificationEmail): NotificationEmail {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* protos.NotificationEmail.Type type */ 1:
                    message.type = reader.int32();
                    break;
                case /* repeated string recipients */ 2:
                    message.recipients.push(reader.string());
                    break;
                case /* string from_address */ 3:
                    message.fromAddress = reader.string();
                    break;
                case /* protos.NotificationEmailSMTP smtp */ 1000:
                    message.config = {
                        oneofKind: "smtp",
                        smtp: NotificationEmailSMTP.internalBinaryRead(reader, reader.uint32(), options, (message.config as any).smtp)
                    };
                    break;
                case /* protos.NotificationEmailSES ses */ 1001:
                    message.config = {
                        oneofKind: "ses",
                        ses: NotificationEmailSES.internalBinaryRead(reader, reader.uint32(), options, (message.config as any).ses)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: NotificationEmail, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* protos.NotificationEmail.Type type = 1; */
        if (message.type !== 0)
            writer.tag(1, WireType.Varint).int32(message.type);
        /* repeated string recipients = 2; */
        for (let i = 0; i < message.recipients.length; i++)
            writer.tag(2, WireType.LengthDelimited).string(message.recipients[i]);
        /* string from_address = 3; */
        if (message.fromAddress !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.fromAddress);
        /* protos.NotificationEmailSMTP smtp = 1000; */
        if (message.config.oneofKind === "smtp")
            NotificationEmailSMTP.internalBinaryWrite(message.config.smtp, writer.tag(1000, WireType.LengthDelimited).fork(), options).join();
        /* protos.NotificationEmailSES ses = 1001; */
        if (message.config.oneofKind === "ses")
            NotificationEmailSES.internalBinaryWrite(message.config.ses, writer.tag(1001, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message protos.NotificationEmail
 */
export const NotificationEmail = new NotificationEmail$Type();
// @generated message type with reflection information, may provide speed optimized methods
class NotificationEmailSMTP$Type extends MessageType<NotificationEmailSMTP> {
    constructor() {
        super("protos.NotificationEmailSMTP", [
            { no: 1, name: "host", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "port", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "user", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "password", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "use_tls", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<NotificationEmailSMTP>): NotificationEmailSMTP {
        const message = { host: "", port: 0, user: "", password: "", useTls: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<NotificationEmailSMTP>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: NotificationEmailSMTP): NotificationEmailSMTP {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string host */ 1:
                    message.host = reader.string();
                    break;
                case /* int32 port */ 2:
                    message.port = reader.int32();
                    break;
                case /* string user */ 3:
                    message.user = reader.string();
                    break;
                case /* string password */ 4:
                    message.password = reader.string();
                    break;
                case /* bool use_tls */ 5:
                    message.useTls = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: NotificationEmailSMTP, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string host = 1; */
        if (message.host !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.host);
        /* int32 port = 2; */
        if (message.port !== 0)
            writer.tag(2, WireType.Varint).int32(message.port);
        /* string user = 3; */
        if (message.user !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.user);
        /* string password = 4; */
        if (message.password !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.password);
        /* bool use_tls = 5; */
        if (message.useTls !== false)
            writer.tag(5, WireType.Varint).bool(message.useTls);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message protos.NotificationEmailSMTP
 */
export const NotificationEmailSMTP = new NotificationEmailSMTP$Type();
// @generated message type with reflection information, may provide speed optimized methods
class NotificationEmailSES$Type extends MessageType<NotificationEmailSES> {
    constructor() {
        super("protos.NotificationEmailSES", [
            { no: 1, name: "ses_region", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "ses_access_key_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "ses_secret_access_key", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<NotificationEmailSES>): NotificationEmailSES {
        const message = { sesRegion: "", sesAccessKeyId: "", sesSecretAccessKey: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<NotificationEmailSES>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: NotificationEmailSES): NotificationEmailSES {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string ses_region */ 1:
                    message.sesRegion = reader.string();
                    break;
                case /* string ses_access_key_id */ 2:
                    message.sesAccessKeyId = reader.string();
                    break;
                case /* string ses_secret_access_key */ 3:
                    message.sesSecretAccessKey = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: NotificationEmailSES, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string ses_region = 1; */
        if (message.sesRegion !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.sesRegion);
        /* string ses_access_key_id = 2; */
        if (message.sesAccessKeyId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.sesAccessKeyId);
        /* string ses_secret_access_key = 3; */
        if (message.sesSecretAccessKey !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.sesSecretAccessKey);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message protos.NotificationEmailSES
 */
export const NotificationEmailSES = new NotificationEmailSES$Type();
// @generated message type with reflection information, may provide speed optimized methods
class NotificationPagerDuty$Type extends MessageType<NotificationPagerDuty> {
    constructor() {
        super("protos.NotificationPagerDuty", [
            { no: 1, name: "token", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "email", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "service_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "urgency", kind: "enum", T: () => ["protos.NotificationPagerDuty.Urgency", NotificationPagerDuty_Urgency, "URGENCY_"] }
        ]);
    }
    create(value?: PartialMessage<NotificationPagerDuty>): NotificationPagerDuty {
        const message = { token: "", email: "", serviceId: "", urgency: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<NotificationPagerDuty>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: NotificationPagerDuty): NotificationPagerDuty {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string token */ 1:
                    message.token = reader.string();
                    break;
                case /* string email */ 2:
                    message.email = reader.string();
                    break;
                case /* string service_id */ 3:
                    message.serviceId = reader.string();
                    break;
                case /* protos.NotificationPagerDuty.Urgency urgency */ 4:
                    message.urgency = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: NotificationPagerDuty, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string token = 1; */
        if (message.token !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.token);
        /* string email = 2; */
        if (message.email !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.email);
        /* string service_id = 3; */
        if (message.serviceId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.serviceId);
        /* protos.NotificationPagerDuty.Urgency urgency = 4; */
        if (message.urgency !== 0)
            writer.tag(4, WireType.Varint).int32(message.urgency);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message protos.NotificationPagerDuty
 */
export const NotificationPagerDuty = new NotificationPagerDuty$Type();
