syntax = "proto3";

package protos.steps;

option go_package = "github.com/streamdal/streamdal/libs/protos/build/go/protos/steps";

enum DetectiveType {
  // 1000-1999 reserved for core match types

  DETECTIVE_TYPE_UNKNOWN = 0;
  DETECTIVE_TYPE_IS_EMPTY = 1000;
  DETECTIVE_TYPE_HAS_FIELD = 1001;
  DETECTIVE_TYPE_IS_TYPE = 1002;
  DETECTIVE_TYPE_STRING_CONTAINS_ANY = 1003;
  DETECTIVE_TYPE_STRING_CONTAINS_ALL = 1004;
  DETECTIVE_TYPE_STRING_EQUAL = 1005;
  DETECTIVE_TYPE_IPV4_ADDRESS = 1006;
  DETECTIVE_TYPE_IPV6_ADDRESS = 1007;
  DETECTIVE_TYPE_MAC_ADDRESS = 1008;
  DETECTIVE_TYPE_REGEX = 1009;
  DETECTIVE_TYPE_TIMESTAMP_RFC3339 = 1010;
  DETECTIVE_TYPE_TIMESTAMP_UNIX_NANO = 1011;
  DETECTIVE_TYPE_TIMESTAMP_UNIX = 1012;
  DETECTIVE_TYPE_BOOLEAN_TRUE = 1013;
  DETECTIVE_TYPE_BOOLEAN_FALSE = 1014;
  DETECTIVE_TYPE_UUID = 1015;
  DETECTIVE_TYPE_URL = 1016;
  DETECTIVE_TYPE_HOSTNAME = 1017;
  DETECTIVE_TYPE_STRING_LENGTH_MIN = 1018;
  DETECTIVE_TYPE_STRING_LENGTH_MAX = 1019;
  DETECTIVE_TYPE_STRING_LENGTH_RANGE = 1020;
  DETECTIVE_TYPE_SEMVER = 1021;

  // PII matchers (2000-2999)

  /// Payloads containing values with any PII - runs all PII matchers
  DETECTIVE_TYPE_PII_ANY = 2000;
  // Payloads containing values with a credit card number
  DETECTIVE_TYPE_PII_CREDIT_CARD = 2001;
  // Payloads containing values with a social security number
  DETECTIVE_TYPE_PII_SSN = 2002;
  // Payloads containing values with an email address
  DETECTIVE_TYPE_PII_EMAIL = 2003;
  // Payloads containing values with a phone number
  DETECTIVE_TYPE_PII_PHONE = 2004;
  // Payloads containing values with a driver's license
  DETECTIVE_TYPE_PII_DRIVER_LICENSE = 2005;
  // Payloads containing values with a passport ID
  DETECTIVE_TYPE_PII_PASSPORT_ID = 2006;
  // Payloads containing values with a VIN number
  DETECTIVE_TYPE_PII_VIN_NUMBER = 2007;
  // Payloads containing values with various serial number formats
  DETECTIVE_TYPE_PII_SERIAL_NUMBER = 2008;
  // Payloads containing fields named "login", "username", "user", "userid", "user_id", "user", "password", "pass", "passwd", "pwd"
  DETECTIVE_TYPE_PII_LOGIN = 2009;
  // Payloads containing fields named "taxpayer_id", "tax_id", "taxpayerid", "taxid"
  DETECTIVE_TYPE_PII_TAXPAYER_ID = 2010;
  // Payloads containing fields named "address", "street", "city", "state", "zip", "zipcode", "zip_code", "country"
  DETECTIVE_TYPE_PII_ADDRESS = 2011;
  // Payloads containing fields named "signature", "signature_image", "signature_image_url", "signature_image_uri"
  DETECTIVE_TYPE_PII_SIGNATURE = 2012;
  // Payloads containing values that contain GPS data or coordinates like "lat", "lon", "latitude", "longitude"
  DETECTIVE_TYPE_PII_GEOLOCATION = 2013;
  // Payloads containing fields like "school", "university", "college", "education"
  DETECTIVE_TYPE_PII_EDUCATION = 2014;
  // Payloads containing fields like "account", "bank", "credit", "debit", "financial", "finance"
  DETECTIVE_TYPE_PII_FINANCIAL = 2015;
  // Payloads containing fields like "patient", "health", "healthcare", "health care", "medical"
  DETECTIVE_TYPE_PII_HEALTH = 2016;

  DETECTIVE_TYPE_PII_AWS_KEY_ID = 2017;
  DETECTIVE_TYPE_PII_RSA_KEY = 2018;
  DETECTIVE_TYPE_PII_TITLE = 2019;
  DETECTIVE_TYPE_PII_RELIGION = 2020;
  DETECTIVE_TYPE_PII_SLACK_TOKEN = 2021;
  DETECTIVE_TYPE_PII_STRIPE_KEY = 2022;
  DETECTIVE_TYPE_PII_IBAN = 2023;
  DETECTIVE_TYPE_PII_SWIFT_BIC = 2024;
  DETECTIVE_TYPE_PII_BANK_ROUTING_NUMBER = 2025;
  DETECTIVE_TYPE_PII_CRYPTO_ADDRESS = 2026;
  DETECTIVE_TYPE_PII_GITHUB_PAT = 2027;
  DETECTIVE_TYPE_PII_BRAINTREE_ACCESS_TOKEN = 2028;
  DETECTIVE_TYPE_PII_AWS_MWS_AUTH_TOKEN = 2029;
  DETECTIVE_TYPE_PII_DATABRICKS_PAT = 2030;
  DETECTIVE_TYPE_PII_SENDGRID_KEY = 2031;
  DETECTIVE_TYPE_PII_AZURE_SQL_CONN_STRING = 2032;
  DETECTIVE_TYPE_PII_JWT = 2033;
  DETECTIVE_TYPE_PII_DOCKER_SWARM_TOKEN = 2034;
  DETECTIVE_TYPE_PII_BEARER_TOKEN = 2035;

  // Uses field/path keyword matching to detect PII, rather than the field's value
  DETECTIVE_TYPE_PII_KEYWORD = 2036;


  // Numeric matchers (3000-3999)

  DETECTIVE_TYPE_NUMERIC_EQUAL_TO = 3000;
  DETECTIVE_TYPE_NUMERIC_GREATER_THAN = 3001;
  DETECTIVE_TYPE_NUMERIC_GREATER_EQUAL = 3002;
  DETECTIVE_TYPE_NUMERIC_LESS_THAN = 3003;
  DETECTIVE_TYPE_NUMERIC_LESS_EQUAL = 3004;
  DETECTIVE_TYPE_NUMERIC_RANGE = 3005;
  DETECTIVE_TYPE_NUMERIC_MIN = 3006;
  DETECTIVE_TYPE_NUMERIC_MAX = 3007;
}

message DetectiveStep {
  optional string path = 1;
  repeated string args = 2; // args determined by match_type
  optional bool negate = 3;
  DetectiveType type = 4;
}

message DetectiveStepResultMatch {
  DetectiveType type = 1;

  // For JSON payloads, the path to the match
  string path = 2;

  // For string payloads, the start and end characters of the match
  // Placeholder for now, will implement in the future
  //int32 char_index_start = 3;
  //int32 char_index_end = 4;

  // Value of the match
  bytes value = 5;

  // Used to return the type of PII we detected.
  // This differs from `type` in that it is the type of PII we detected, not the type of match we used to detect it.
  // This value is freeform and determined based on the values inside the keyword matcher.
  string pii_type = 6;
}

message DetectiveStepResult {
  repeated DetectiveStepResultMatch matches = 1;
}
