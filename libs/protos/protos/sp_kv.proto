syntax = "proto3";

package protos;

import "shared/sp_shared.proto";

option go_package = "github.com/streamdal/streamdal/libs/protos/build/go/protos";
option java_package = "com.streamdal.protos";

// KVObject represents a single KV object used in protos.KVInstruction; this is
// constructed by server and broadcast out to other server nodes.
message KVObject {
  // Valid key regex: /^[a-zA-Z0-9_-:]+$/)
  string key = 1;

  // KV value
  bytes value = 2;

  // When was this object created
  int64 created_at_unix_ts_nano_utc = 3;

  // Last time the object was updated
  int64 updated_at_unix_ts_nano_utc = 4;
}

// Container for one or more KVObject's; server broadcasts KVCommand that
// contains one or more of these instructions when a "POST /api/v1/kv" request
// is made.
message KVInstruction {
  // Unique ID for this instruction
  string id = 1;

  // What kind of an action is this?
  shared.KVAction action = 2;

  // KV object
  KVObject object = 3;

  // When this instruction was requested (usually will be the HTTP API request time)
  int64 requested_at_unix_ts_nano_utc = 4;
}

// Used for broadcasting KV instructions to other server nodes.
// NOTE: While this data structure is similar to KVCommand it makes sense to
// keep them separate. It would cause more confusion if we tried to re-use
// KVCommand for the purpose of broadcasting AND for sending SDK commands. ~DS
//
// This request structure is used for including all updates - create/update/delete.
message KVRequest {
  repeated KVInstruction instructions = 1;
  bool overwrite = 2;
}

///////////////////////// Data Types Used in APIs /////////////////////////////

// "POST /api/v1/kv" accepts JSON of this type for it's request payload. This is
// converted by BroadcastKV() to a KVCommand
message KVCreateHTTPRequest {
  repeated KVObject kvs = 1;

  // Whether to treat create as upsert -- ie. do not error if key already exists
  bool overwrite = 2;
}

message KVUpdateHTTPRequest {
  repeated KVObject kvs = 1;
}

