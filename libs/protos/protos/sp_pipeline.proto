syntax = "proto3";

package protos;

import "sp_notify.proto";
import "steps/sp_steps_custom.proto";
import "steps/sp_steps_decode.proto";
import "steps/sp_steps_detective.proto";
import "steps/sp_steps_encode.proto";
import "steps/sp_steps_httprequest.proto";
import "steps/sp_steps_inferschema.proto";
import "steps/sp_steps_kv.proto";
import "steps/sp_steps_schema_validation.proto";
import "steps/sp_steps_transform.proto";
import "steps/sp_steps_valid_json.proto";

option go_package = "github.com/streamdal/streamdal/libs/protos/build/go/protos";
option java_package = "com.streamdal.protos";

// Pipeline is a structure that holds one or more pipeline steps. This structure
// is intended to be immutable; clients are expected to generate WASMRequest's
// that contain a pipeline step.
message Pipeline {
  // ID should NOT be set by external gRPC client on CreatePipelineRequest - it
  // will be ignored; it _does_ need to be set on UpdatePipelineRequest.
  string id = 1;

  // Friendly name for the pipeline
  string name = 2;

  // One or more steps to execute
  repeated PipelineStep steps = 3;

  // Notification configs for this pipeline. Only filled out in external API responses
  // This is deprecated and the data has moved to PipelineStep
  repeated protos.NotificationConfig _notification_configs = 4 [deprecated=true]; // protolint:disable:this FIELD_NAMES_LOWER_SNAKE_CASE

  // Indicates whether the pipeline is paused or not. Used internally by server.
  optional bool _paused = 1000; // protolint:disable:this FIELD_NAMES_LOWER_SNAKE_CASE
}

// Defines the ways in which a pipeline can be aborted
enum AbortCondition {
  ABORT_CONDITION_UNSET = 0;
  ABORT_CONDITION_ABORT_CURRENT = 1;
  ABORT_CONDITION_ABORT_ALL = 2;
}

// Conditions define how the SDK should handle a Wasm response in a step.
// Should it continue executing the pipeline, should it abort, should it notify
// and on_error.
// TODO: de-pluralize this name
message PipelineStepConditions {
  // Should we abort execution?
  AbortCondition abort = 1;

  bool notify = 2 [deprecated=true];

  // Should we include additional metadata that SDK should pass back to user?
  map<string, string> metadata = 3;

  PipelineStepNotification notification = 4;
}


message PipelineStepNotification {
  enum PayloadType {
    // Same functionality as PAYLOAD_TYPE_EXCLUDE
    PAYLOAD_TYPE_UNSET = 0;

    // Default. No payload data included in notification
    PAYLOAD_TYPE_EXCLUDE = 1;

    // Entire payload content included in notification
    PAYLOAD_TYPE_FULL_PAYLOAD = 2;

    // Only specified paths of payload content included in notification
    // Only works on JSON. Plaintext payloads will be ignored.
    PAYLOAD_TYPE_SELECT_PATHS = 3;
  }

  // The UUIDs of the notification config to use
  // This is kept separate to avoid having to configure slack/email settings
  // every time and also because that config info is sensitive and is encrypted
  repeated string notification_config_ids = 1;

  PayloadType payload_type = 2;

  // If type == paths, then we will look here for a list of json paths to include
  // in the notification payload.
  repeated string paths = 3;

  // Notification configs for this pipeline. Only filled out in external API responses
  // TODO: needed? We might be able to exclude since NotificationConfigID is present
  // TODO: and the console can pull all notification configs via `external.GetNotifications()`
  //repeated protos.NotificationConfig _notification_configs = 4 [deprecated=true]; // protolint:disable:this FIELD_NAMES_LOWER_SNAKE_CASE
}

// A pipeline step is a single step in a pipeline.
message PipelineStep {
  // Friendly name for the step
  string name = 1;

  // SDKs should read this when Wasm returns 'true' to determine what to do next.
  PipelineStepConditions on_true = 2;

  // SDKs should read this when Wasm returns 'false' to determine what to do next.
  PipelineStepConditions on_false = 3;

  // Indicates whether to use the results from a previous step as input to this step
  bool dynamic = 4;

  // SDKs should read this when Wasm returns 'error' to determine what to do next.
  PipelineStepConditions on_error = 5;

  oneof step {
    steps.DetectiveStep detective = 1000;
    steps.TransformStep transform = 1001;
    steps.EncodeStep encode = 1002;
    steps.DecodeStep decode = 1003;
    steps.CustomStep custom = 1004;
    steps.HttpRequestStep http_request = 1005;
    steps.KVStep kv = 1006;
    steps.InferSchemaStep infer_schema = 1007;
    steps.ValidJSONStep valid_json = 1008;
    steps.SchemaValidationStep schema_validation = 1009;
  }

  // ID is a uuid(sha256(_wasm_bytes)) that is set by server
  optional string _wasm_id = 10000; // protolint:disable:this FIELD_NAMES_LOWER_SNAKE_CASE

  // WASM module bytes (set by server)
  optional bytes _wasm_bytes = 10001; // protolint:disable:this FIELD_NAMES_LOWER_SNAKE_CASE

  // WASM function name to execute (set by server)
  optional string _wasm_function = 10002; // protolint:disable:this FIELD_NAMES_LOWER_SNAKE_CASE
}

// PipelineConfigs is stored encoded in redis:streamdal_audience:$audStr; it is
// also used in external.GetAllResponse:config.
message PipelineConfigs {
  repeated PipelineConfig configs = 1;

  // !!!!!!!! IMPORTANT !!!!!!!!!!
  //
  // For internal use only in server. We need this because marshalling/encoding
  // an empty protobuf results in nil. If someone does a SetPipelines() with
  // empty pipeline IDs - we will set this, so that the encoded protobuf gets
  // written as the actual object and not nil.
  //
  optional bool _is_empty = 1000; // protolint:disable:this FIELD_NAMES_LOWER_SNAKE_CASE
}


// PipelineConfig is structure used in protos.PipelineConfigs
message PipelineConfig {
  string id = 1;
  bool paused = 2;
  int64 created_at_unix_ts_utc = 3;
}
