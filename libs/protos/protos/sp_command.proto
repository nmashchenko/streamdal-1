syntax = "proto3";

package protos;

import "shared/sp_shared.proto";
import "sp_common.proto";
import "sp_kv.proto";
import "sp_pipeline.proto";

option go_package = "github.com/streamdal/streamdal/libs/protos/build/go/protos";
option ruby_package = "Streamdal::Protos";

// Command is used by streamdal server for sending commands to SDKs
message Command {
  // Who is this command intended for?
  // NOTE: Some commands (such as KeepAliveCommand, KVCommand) do NOT use audience and will ignore it
  protos.Audience audience = 1;

  oneof command {
    // NOTE: As of 01.29.2024, pause, resume, delete and update pipeline commands
    // are replaced with the SetPipelinesCommand. When a pause/resume/etc. are
    // called on server, the server will emit an appropriate SetPipelines cmd.

    // Emitted by server when a user makes a pause, resume, delete or update
    // pipeline and set pipelines external grpc API call.
    // NOTE: This was introduced during ordered pipeline updates.
    SetPipelinesCommand set_pipelines = 100;

    // Server sends this periodically to SDKs to keep the connection alive
    KeepAliveCommand keep_alive = 101;

    // Server will emit this when a user makes changes to the KV store
    // via the KV HTTP API.
    KVCommand kv = 102;

    // Emitted by server when a user makes a Tail() call
    // Consumed by all server instances and by SDK
    TailCommand tail = 103;

    // Emitted by the server when a user deletes an audience or service
    // Consumed by SDK to delete audience from it's internal cache so
    // that the heartbeat does not send the audience back to the server
    DeleteAudiencesCommand delete = 104;
  }
}

message SetPipelinesCommand {
  repeated protos.Pipeline pipelines = 1;

  // ID = wasm ID
  map<string,protos.shared.WasmModule> wasm_modules = 2;
}

message KeepAliveCommand {
  // Nothing needed in here, just a ping from server to SDK
}

// Sent by server on Register channel(s) to live SDKs
message KVCommand {
  repeated protos.KVInstruction instructions = 1;

  // Create & Update specific setting that will cause the Create or Update to
  // work as an upsert.
  bool overwrite = 2;
}

message TailCommand {
  TailRequest request = 2;
}

message DeleteAudiencesCommand {
  repeated protos.Audience audience = 1;
}