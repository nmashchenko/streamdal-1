---
import SidebarContent from "@components/LeftSidebar/SidebarContent.astro";
import SidebarToggleTabGroup from "@components/LeftSidebar/SidebarToggleTabGroup";
import { getLanguageFromURL } from "../../languages";
import { MenuItem, SIDEBAR } from "../../config";

type Props = {
  currentPage: string;
};

const { currentPage } = Astro.props as Props;
const currentPageMatch = currentPage.slice(1);
const langCode = getLanguageFromURL(currentPage);
const sidebar = SIDEBAR[langCode];

const getActiveTab = (
  currentPage: string,
  menu: MenuItem[]
): string | undefined => {
  for (const item of menu) {
    if (item.link && currentPage.includes(item.link)) {
      return item.link;
    }
    if (item.children && item.children.length > 0) {
      const childActiveTab = getActiveTab(currentPage, item.children);
      if (childActiveTab) {
        return childActiveTab;
      }
    }
  }
  return undefined;
};

const activeTab: "learn" | "api" = getActiveTab(
  currentPageMatch,
  sidebar["learn"]
)
  ? "learn"
  : getActiveTab(currentPageMatch, sidebar["api"])
  ? "api"
  : "learn";
---

<nav aria-labelledby="grid-left">
  <SidebarToggleTabGroup
    client:load
    defaultActiveTab={activeTab}
    labels={{ learn: "Developer Docs", api: "Resources" }}
  />
  <ul class="nav-groups">
    <SidebarContent
      type={"learn"}
      defaultActiveTab={activeTab}
      sidebarSections={sidebar["learn"]}
      currentPageMatch={currentPageMatch}
    />
    <SidebarContent
      type={"api"}
      defaultActiveTab={activeTab}
      sidebarSections={sidebar["api"]}
      currentPageMatch={currentPageMatch}
    />
  </ul>
</nav>

<script is:inline>
  window.addEventListener("DOMContentLoaded", () => {
    const target = document.querySelector('[aria-current="page"]');
    if (target && target.offsetTop > window.innerHeight - 100) {
      document.querySelector(".nav-groups").scrollTop = target.offsetTop;
    }
  });
</script>

<style>
  nav {
    width: 100%;
    margin-right: 1rem;
  }

  .nav-groups {
    height: 100%;
    padding: 1rem;
    overflow: auto;
    position: relative;
    max-height: 100vh;
    scrollbar-width: none;

    &::-webkit-scrollbar {
      display: none;
    }
  }

  .nav-groups > li + li {
    margin-top: 2rem;
  }

  .nav-groups > :first-child {
    padding-top: var(--doc-padding);
  }

  .nav-groups > :last-child {
    padding-bottom: 2rem;
  }

  .nav-group-title {
    font-size: 1rem;
    font-weight: 700;
    padding: 0.1rem 1rem;
    text-transform: uppercase;
    margin-bottom: 0.5rem;
  }

  .nav-link a {
    font-size: 1rem;
    margin: 1px;
    padding: 0.3rem 1rem;
    font: inherit;
    color: inherit;
    text-decoration: none;
    display: block;
  }

  .nav-link a:hover,
  .nav-link a:focus {
    background-color: var(--theme-bg-hover);
  }

  .nav-link a[aria-current="page"] {
    color: var(--theme-text-accent);
    background-color: var(--theme-bg-accent);
    font-weight: 600;
  }

  @media (min-width: 50em) {
    .nav-groups {
      padding: 0;
      padding-top: 1.5rem;
    }
  }
</style>

<style is:global>
  :root.theme-dark .nav-link a[aria-current="page"] {
    color: hsla(var(--color-base-white), 100%, 1);
  }
</style>
