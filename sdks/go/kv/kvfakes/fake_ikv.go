// Code generated by counterfeiter. DO NOT EDIT.
package kvfakes

import (
	"sync"

	"github.com/streamdal/streamdal/sdks/go/kv"
)

type FakeIKV struct {
	DeleteStub        func(string) bool
	deleteMutex       sync.RWMutex
	deleteArgsForCall []struct {
		arg1 string
	}
	deleteReturns struct {
		result1 bool
	}
	deleteReturnsOnCall map[int]struct {
		result1 bool
	}
	ExistsStub        func(string) bool
	existsMutex       sync.RWMutex
	existsArgsForCall []struct {
		arg1 string
	}
	existsReturns struct {
		result1 bool
	}
	existsReturnsOnCall map[int]struct {
		result1 bool
	}
	GetStub        func(string) (string, bool)
	getMutex       sync.RWMutex
	getArgsForCall []struct {
		arg1 string
	}
	getReturns struct {
		result1 string
		result2 bool
	}
	getReturnsOnCall map[int]struct {
		result1 string
		result2 bool
	}
	ItemsStub        func() int64
	itemsMutex       sync.RWMutex
	itemsArgsForCall []struct {
	}
	itemsReturns struct {
		result1 int64
	}
	itemsReturnsOnCall map[int]struct {
		result1 int64
	}
	KeysStub        func() []string
	keysMutex       sync.RWMutex
	keysArgsForCall []struct {
	}
	keysReturns struct {
		result1 []string
	}
	keysReturnsOnCall map[int]struct {
		result1 []string
	}
	PurgeStub        func() int64
	purgeMutex       sync.RWMutex
	purgeArgsForCall []struct {
	}
	purgeReturns struct {
		result1 int64
	}
	purgeReturnsOnCall map[int]struct {
		result1 int64
	}
	SetStub        func(string, string) bool
	setMutex       sync.RWMutex
	setArgsForCall []struct {
		arg1 string
		arg2 string
	}
	setReturns struct {
		result1 bool
	}
	setReturnsOnCall map[int]struct {
		result1 bool
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeIKV) Delete(arg1 string) bool {
	fake.deleteMutex.Lock()
	ret, specificReturn := fake.deleteReturnsOnCall[len(fake.deleteArgsForCall)]
	fake.deleteArgsForCall = append(fake.deleteArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.DeleteStub
	fakeReturns := fake.deleteReturns
	fake.recordInvocation("Delete", []interface{}{arg1})
	fake.deleteMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeIKV) DeleteCallCount() int {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	return len(fake.deleteArgsForCall)
}

func (fake *FakeIKV) DeleteCalls(stub func(string) bool) {
	fake.deleteMutex.Lock()
	defer fake.deleteMutex.Unlock()
	fake.DeleteStub = stub
}

func (fake *FakeIKV) DeleteArgsForCall(i int) string {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	argsForCall := fake.deleteArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIKV) DeleteReturns(result1 bool) {
	fake.deleteMutex.Lock()
	defer fake.deleteMutex.Unlock()
	fake.DeleteStub = nil
	fake.deleteReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeIKV) DeleteReturnsOnCall(i int, result1 bool) {
	fake.deleteMutex.Lock()
	defer fake.deleteMutex.Unlock()
	fake.DeleteStub = nil
	if fake.deleteReturnsOnCall == nil {
		fake.deleteReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.deleteReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *FakeIKV) Exists(arg1 string) bool {
	fake.existsMutex.Lock()
	ret, specificReturn := fake.existsReturnsOnCall[len(fake.existsArgsForCall)]
	fake.existsArgsForCall = append(fake.existsArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.ExistsStub
	fakeReturns := fake.existsReturns
	fake.recordInvocation("Exists", []interface{}{arg1})
	fake.existsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeIKV) ExistsCallCount() int {
	fake.existsMutex.RLock()
	defer fake.existsMutex.RUnlock()
	return len(fake.existsArgsForCall)
}

func (fake *FakeIKV) ExistsCalls(stub func(string) bool) {
	fake.existsMutex.Lock()
	defer fake.existsMutex.Unlock()
	fake.ExistsStub = stub
}

func (fake *FakeIKV) ExistsArgsForCall(i int) string {
	fake.existsMutex.RLock()
	defer fake.existsMutex.RUnlock()
	argsForCall := fake.existsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIKV) ExistsReturns(result1 bool) {
	fake.existsMutex.Lock()
	defer fake.existsMutex.Unlock()
	fake.ExistsStub = nil
	fake.existsReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeIKV) ExistsReturnsOnCall(i int, result1 bool) {
	fake.existsMutex.Lock()
	defer fake.existsMutex.Unlock()
	fake.ExistsStub = nil
	if fake.existsReturnsOnCall == nil {
		fake.existsReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.existsReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *FakeIKV) Get(arg1 string) (string, bool) {
	fake.getMutex.Lock()
	ret, specificReturn := fake.getReturnsOnCall[len(fake.getArgsForCall)]
	fake.getArgsForCall = append(fake.getArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.GetStub
	fakeReturns := fake.getReturns
	fake.recordInvocation("Get", []interface{}{arg1})
	fake.getMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIKV) GetCallCount() int {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	return len(fake.getArgsForCall)
}

func (fake *FakeIKV) GetCalls(stub func(string) (string, bool)) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = stub
}

func (fake *FakeIKV) GetArgsForCall(i int) string {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	argsForCall := fake.getArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIKV) GetReturns(result1 string, result2 bool) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = nil
	fake.getReturns = struct {
		result1 string
		result2 bool
	}{result1, result2}
}

func (fake *FakeIKV) GetReturnsOnCall(i int, result1 string, result2 bool) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = nil
	if fake.getReturnsOnCall == nil {
		fake.getReturnsOnCall = make(map[int]struct {
			result1 string
			result2 bool
		})
	}
	fake.getReturnsOnCall[i] = struct {
		result1 string
		result2 bool
	}{result1, result2}
}

func (fake *FakeIKV) Items() int64 {
	fake.itemsMutex.Lock()
	ret, specificReturn := fake.itemsReturnsOnCall[len(fake.itemsArgsForCall)]
	fake.itemsArgsForCall = append(fake.itemsArgsForCall, struct {
	}{})
	stub := fake.ItemsStub
	fakeReturns := fake.itemsReturns
	fake.recordInvocation("Items", []interface{}{})
	fake.itemsMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeIKV) ItemsCallCount() int {
	fake.itemsMutex.RLock()
	defer fake.itemsMutex.RUnlock()
	return len(fake.itemsArgsForCall)
}

func (fake *FakeIKV) ItemsCalls(stub func() int64) {
	fake.itemsMutex.Lock()
	defer fake.itemsMutex.Unlock()
	fake.ItemsStub = stub
}

func (fake *FakeIKV) ItemsReturns(result1 int64) {
	fake.itemsMutex.Lock()
	defer fake.itemsMutex.Unlock()
	fake.ItemsStub = nil
	fake.itemsReturns = struct {
		result1 int64
	}{result1}
}

func (fake *FakeIKV) ItemsReturnsOnCall(i int, result1 int64) {
	fake.itemsMutex.Lock()
	defer fake.itemsMutex.Unlock()
	fake.ItemsStub = nil
	if fake.itemsReturnsOnCall == nil {
		fake.itemsReturnsOnCall = make(map[int]struct {
			result1 int64
		})
	}
	fake.itemsReturnsOnCall[i] = struct {
		result1 int64
	}{result1}
}

func (fake *FakeIKV) Keys() []string {
	fake.keysMutex.Lock()
	ret, specificReturn := fake.keysReturnsOnCall[len(fake.keysArgsForCall)]
	fake.keysArgsForCall = append(fake.keysArgsForCall, struct {
	}{})
	stub := fake.KeysStub
	fakeReturns := fake.keysReturns
	fake.recordInvocation("Keys", []interface{}{})
	fake.keysMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeIKV) KeysCallCount() int {
	fake.keysMutex.RLock()
	defer fake.keysMutex.RUnlock()
	return len(fake.keysArgsForCall)
}

func (fake *FakeIKV) KeysCalls(stub func() []string) {
	fake.keysMutex.Lock()
	defer fake.keysMutex.Unlock()
	fake.KeysStub = stub
}

func (fake *FakeIKV) KeysReturns(result1 []string) {
	fake.keysMutex.Lock()
	defer fake.keysMutex.Unlock()
	fake.KeysStub = nil
	fake.keysReturns = struct {
		result1 []string
	}{result1}
}

func (fake *FakeIKV) KeysReturnsOnCall(i int, result1 []string) {
	fake.keysMutex.Lock()
	defer fake.keysMutex.Unlock()
	fake.KeysStub = nil
	if fake.keysReturnsOnCall == nil {
		fake.keysReturnsOnCall = make(map[int]struct {
			result1 []string
		})
	}
	fake.keysReturnsOnCall[i] = struct {
		result1 []string
	}{result1}
}

func (fake *FakeIKV) Purge() int64 {
	fake.purgeMutex.Lock()
	ret, specificReturn := fake.purgeReturnsOnCall[len(fake.purgeArgsForCall)]
	fake.purgeArgsForCall = append(fake.purgeArgsForCall, struct {
	}{})
	stub := fake.PurgeStub
	fakeReturns := fake.purgeReturns
	fake.recordInvocation("Purge", []interface{}{})
	fake.purgeMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeIKV) PurgeCallCount() int {
	fake.purgeMutex.RLock()
	defer fake.purgeMutex.RUnlock()
	return len(fake.purgeArgsForCall)
}

func (fake *FakeIKV) PurgeCalls(stub func() int64) {
	fake.purgeMutex.Lock()
	defer fake.purgeMutex.Unlock()
	fake.PurgeStub = stub
}

func (fake *FakeIKV) PurgeReturns(result1 int64) {
	fake.purgeMutex.Lock()
	defer fake.purgeMutex.Unlock()
	fake.PurgeStub = nil
	fake.purgeReturns = struct {
		result1 int64
	}{result1}
}

func (fake *FakeIKV) PurgeReturnsOnCall(i int, result1 int64) {
	fake.purgeMutex.Lock()
	defer fake.purgeMutex.Unlock()
	fake.PurgeStub = nil
	if fake.purgeReturnsOnCall == nil {
		fake.purgeReturnsOnCall = make(map[int]struct {
			result1 int64
		})
	}
	fake.purgeReturnsOnCall[i] = struct {
		result1 int64
	}{result1}
}

func (fake *FakeIKV) Set(arg1 string, arg2 string) bool {
	fake.setMutex.Lock()
	ret, specificReturn := fake.setReturnsOnCall[len(fake.setArgsForCall)]
	fake.setArgsForCall = append(fake.setArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	stub := fake.SetStub
	fakeReturns := fake.setReturns
	fake.recordInvocation("Set", []interface{}{arg1, arg2})
	fake.setMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeIKV) SetCallCount() int {
	fake.setMutex.RLock()
	defer fake.setMutex.RUnlock()
	return len(fake.setArgsForCall)
}

func (fake *FakeIKV) SetCalls(stub func(string, string) bool) {
	fake.setMutex.Lock()
	defer fake.setMutex.Unlock()
	fake.SetStub = stub
}

func (fake *FakeIKV) SetArgsForCall(i int) (string, string) {
	fake.setMutex.RLock()
	defer fake.setMutex.RUnlock()
	argsForCall := fake.setArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeIKV) SetReturns(result1 bool) {
	fake.setMutex.Lock()
	defer fake.setMutex.Unlock()
	fake.SetStub = nil
	fake.setReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeIKV) SetReturnsOnCall(i int, result1 bool) {
	fake.setMutex.Lock()
	defer fake.setMutex.Unlock()
	fake.SetStub = nil
	if fake.setReturnsOnCall == nil {
		fake.setReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.setReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *FakeIKV) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	fake.existsMutex.RLock()
	defer fake.existsMutex.RUnlock()
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	fake.itemsMutex.RLock()
	defer fake.itemsMutex.RUnlock()
	fake.keysMutex.RLock()
	defer fake.keysMutex.RUnlock()
	fake.purgeMutex.RLock()
	defer fake.purgeMutex.RUnlock()
	fake.setMutex.RLock()
	defer fake.setMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeIKV) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ kv.IKV = new(FakeIKV)
