// Code generated by counterfeiter. DO NOT EDIT.
package metricsfakes

import (
	"context"
	"sync"

	"github.com/streamdal/streamdal/sdks/go/metrics"
	"github.com/streamdal/streamdal/sdks/go/types"
)

type FakeIMetrics struct {
	IncrStub        func(context.Context, *types.CounterEntry) error
	incrMutex       sync.RWMutex
	incrArgsForCall []struct {
		arg1 context.Context
		arg2 *types.CounterEntry
	}
	incrReturns struct {
		result1 error
	}
	incrReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeIMetrics) Incr(arg1 context.Context, arg2 *types.CounterEntry) error {
	fake.incrMutex.Lock()
	ret, specificReturn := fake.incrReturnsOnCall[len(fake.incrArgsForCall)]
	fake.incrArgsForCall = append(fake.incrArgsForCall, struct {
		arg1 context.Context
		arg2 *types.CounterEntry
	}{arg1, arg2})
	stub := fake.IncrStub
	fakeReturns := fake.incrReturns
	fake.recordInvocation("Incr", []interface{}{arg1, arg2})
	fake.incrMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeIMetrics) IncrCallCount() int {
	fake.incrMutex.RLock()
	defer fake.incrMutex.RUnlock()
	return len(fake.incrArgsForCall)
}

func (fake *FakeIMetrics) IncrCalls(stub func(context.Context, *types.CounterEntry) error) {
	fake.incrMutex.Lock()
	defer fake.incrMutex.Unlock()
	fake.IncrStub = stub
}

func (fake *FakeIMetrics) IncrArgsForCall(i int) (context.Context, *types.CounterEntry) {
	fake.incrMutex.RLock()
	defer fake.incrMutex.RUnlock()
	argsForCall := fake.incrArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeIMetrics) IncrReturns(result1 error) {
	fake.incrMutex.Lock()
	defer fake.incrMutex.Unlock()
	fake.IncrStub = nil
	fake.incrReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeIMetrics) IncrReturnsOnCall(i int, result1 error) {
	fake.incrMutex.Lock()
	defer fake.incrMutex.Unlock()
	fake.IncrStub = nil
	if fake.incrReturnsOnCall == nil {
		fake.incrReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.incrReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeIMetrics) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.incrMutex.RLock()
	defer fake.incrMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeIMetrics) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ metrics.IMetrics = new(FakeIMetrics)
